<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[X5_Interval & Sliding Window]]></title>
      <url>%2F2018%2F03%2F22%2FX5-Interval-Sliding-Window%2F</url>
      <content type="text"><![CDATA[Problem Merge Intervals follow up list in java is not thread safe: synchronized concurrent list java note 先确认signature，再确认requirementwork through test，画图说明 compare的时候要用Integer.compare，而不是相减，会溢出 collection.sort是modified merge sort（因为stable，保持相对顺序，eg. 1 2 2’ 3不会出现1 2’ 2 3）object use merge sort，primitive type use quick sort 用collections.emptyList()，是系统初始化好的，不用开辟额外的空间。如果用new Arraylist&lt;&gt;()会占新的空间 Runtime, 要根据代码nlogn test case copy到代码附近 定义res时候直接最下面写return res。显得有条理 先定义cur，而不是每次a.get(i )，更清晰 FB变种，raindrop rope 0-1, [0.2,0.5], [0.75,1.0], [0.3,0.75] deal with floatprivate static final float EPSILON = 1e-10Math.abs(a-b) &lt; EPSILON If drops are given on by one. Not all in the begining. -&gt; 57. insert Interval boolean isWet, 0-1 all is wet 注意处理边界，如果drop&gt;1 Comparable vs Comparator in Java 123456789101112// 定义在class内部class Movie implements Comparable&lt;Movie&gt;&#123; public int compareTo(Movie m)&#123;&#125;&#125;Collection.sort(list);// 定义专门的compare函数class RatingCompare implements Comparator&lt;Movie&gt;&#123; pulic int compare(Movie m1, Movie m2)&#123;&#125;&#125;RatingCompare ratingCompare = new Rating Compare();Collection.sort(list, ratingCompare); Amazon OA Window Sum 给定数组，给定长度，算出数组里面，在这个长度下，分别的连续和 1234&gt; Given array: [1,2,3,4,5,6,7]&gt; Given window: 3&gt; Output: [6,9,12,15,18]&gt; Sliding Window Hard: 689. Maximum Sum of 3 Non-Overlapping Subarrays find 3, fixed subarray size = k =&gt; linear time else , not linear time, different sol, is similar to the buy and sell stock problem. 1234567891011121, 2, 1, 2, 6, 7, 5, 1...........[s1 ].....maxFromLeft maxFromRight 1, 2, 1, 2, 6, 7, 5, 1presum:3, 3, 3, 8,13,12, 6 maxFL: 0, 0, 0, 3, 4 &lt;-index 3, 3, 3, 8, 13 &lt;-valuemaxFR: 0, 0, 0, 0, 4, 5, 6 &lt;-index ., ., ., .,13,12, 6 &lt;-value s1: [k, n-2k]; s0:[0,i-k]; s2:[i+k,n-1]sum = presum[maxFromLeft[i - k]] + presum[i] + presum[maxFromRight[i + k]] 123456789101112131415161718192021222324252627282930313233343536373839404142class Solution &#123;public: vector&lt;int&gt; maxSumOfThreeSubarrays(vector&lt;int&gt;&amp; nums, int k) &#123; int n = nums.size(); vector&lt;long&gt; presum(n,0); long sum = 0; for (int i = 0; i &lt; n; ++i)&#123; if (i&gt;=k)&#123; presum[i-k] = sum; sum -= nums[i-k]; &#125; sum += nums[i]; &#125; presum[n-k] = sum; vector&lt;int&gt; maxFL(n,0), maxFR(n,0); sum = 0; int idx = 0; for (int i = 0; i &lt;= n-3*k; ++i)&#123; if (presum[i] &gt; sum)&#123; sum = presum[i]; idx = i; &#125; maxFL[i] = idx; &#125; sum = 0; idx = 0; for (int i = n-k; i &gt;= 2*k; --i)&#123; if (presum[i] &gt; sum)&#123; sum = presum[i]; idx = i; &#125; maxFR[i] = idx; &#125; sum = 0; idx = 0; for (int i = k; i &lt;= n-2*k; ++i)&#123; long tmp = presum[maxFL[i-k]]+presum[i]+presum[maxFR[i+k]]; if (tmp &gt; sum)&#123; sum = tmp; idx = i; &#125; &#125; return &#123;maxFL[idx-k], idx, maxFR[idx+k]&#125;; &#125;&#125;; ​ Interfaces and Inheritance in Java Interface inheitance: An Interface can extend other interface. 12345678910111213//Class: Smple —implements—&gt; Interface: intFB —extends—&gt;Interface: intFAinterface intFA&#123; void geekName();&#125;interface intFB extends intFA&#123; void geekInstitute()&#125;class sample implements intFB&#123; @override public void geekName()&#123;...&#125; @override public void geekInstitute()&#123;...&#125;&#125; Airbnb: 759. Employee Free Time We are given a list schedule of employees, which represents the working time for each employee. Each employee has a list of non-overlapping Intervals, and these intervals are in sorted order. Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order. Example 1: 12345678&gt; Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]&gt; Output: [[3,4]]&gt; Explanation:&gt; There are a total of three employees, and all common&gt; free time intervals would be [-inf, 1], [3, 4], [10, inf].&gt; We discard any intervals that contain inf as they aren&apos;t finite.&gt;&gt; &gt; Example 2: 123&gt; Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]&gt; Output: [[5,6],[7,9]]&gt; 12345678910111213141516171819202122//similar to 252, 253class Solution &#123;public: vector&lt;Interval&gt; employeeFreeTime(vector&lt;vector&lt;Interval&gt;&gt;&amp; schedule) &#123; vector&lt;int&gt; starts, ends; for (auto s:schedule) for (auto i:s)&#123; starts.push_back(i.start); ends.push_back(i.end); &#125; sort(starts.begin(),starts.end()); sort(ends.begin(),ends.end()); vector&lt;Interval&gt; ans; for (int i = 0; i &lt; starts.size() - 1; ++i) if (ends[i] &lt; starts[i+1]) ans.push_back(Interval(ends[i],starts[i+1])); // ==&gt; starts[ends[i].index] &lt; starts[i+1] // ==&gt; there is i starts and they have already ended // ==&gt; there is free interval x before next i+1 start return ans; &#125;&#125;; 56. Merge Intervals | Sort Given a collection of intervals, merge all overlapping intervals. For example,Given [1,3],[2,6],[8,10],[15,18],return [1,6],[8,10],[15,18]. 1234567891011121314151617181920212223class Solution &#123;public: vector&lt;Interval&gt; merge(vector&lt;Interval&gt;&amp; intervals) &#123; if (intervals.empty()) return &#123;&#125;; sort(intervals.begin(), intervals.end(), [](Interval a, Interval b)&#123;return a.start &lt; b.start;&#125;); int end = intervals[0].end, beg = intervals[0].start; vector&lt;Interval&gt; ans; for (int i=1; i&lt;intervals.size(); i++)&#123; if (intervals[i].start&lt;=end) end = max(end,intervals[i].end); else &#123; ans.push_back(Interval(beg,end)); beg = intervals[i].start; end = intervals[i].end; &#125; &#125; if (beg!=-1) ans.push_back(Interval(beg,end)); return ans; &#125;&#125;; 23. Merge k Sorted Lists 12345678910111213141516171819202122232425262728struct compare&#123; bool operator()(const ListNode* l1, const ListNode* l2)&#123; return l1-&gt;val &gt; l2-&gt;val; &#125;&#125;;class Solution&#123;public: ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists)&#123; priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, compare&gt; q; //for (ListNode* l:lists) for (auto l:lists) if (l) q.push(l); if (q.empty()) return NULL; ListNode* ans = q.top(); ListNode* h = ans; q.pop(); if (h-&gt;next) q.push(h-&gt;next); while (!q.empty())&#123; h-&gt;next = q.top(); q.pop(); h = h-&gt;next; if (h-&gt;next) q.push(h-&gt;next); &#125; return ans; &#125;&#125;; Or, binary use Merge2Lists Materials Meeting Rooms II -Interval 所有题型总结归纳 683. K Empty Slots | sliding window There is a garden with N slots. In each slot, there is a flower. The N flowers will bloom one by one in N days. In each day, there will be exactly one flower blooming and it will be in the status of blooming since then. Given an array flowers consists of number from 1 to N. Each number in the array represents the place where the flower will open in that day. For example, flowers[i] = x means that the unique flower that blooms at day i will be at position x, where i and x will be in the range from 1 to N. Also given an integer k, you need to output in which day there exists two flowers in the status of blooming, and also the number of flowers between them is k and these flowers are not blooming. If there isn’t such day, output -1. Example 1: 123456&gt; Input: &gt; flowers: [1,3,2]&gt; k: 1&gt; Output: 2&gt; Explanation: In the second day, the first and the third flower have become blooming.&gt; &gt; Example 2: 12345&gt; Input: &gt; flowers: [1,2,3]&gt; k: 1&gt; Output: -1&gt; &gt; Note: The given array will be in the range [1, 20000]. 123456789101112131415161718192021222324252627282930313233/*flowers[i] = x : the unique flower that blooms at day i+1 will be at position x=&gt; day[x-1] = i+1x1 = f[i], x2 = f[j], x1 &lt; x2sum( x1 &lt; f[max(i,j)+1...N-1] &lt; x2) == k=&gt;sliding windowleft = x, right = x+k+1day[x+1]...day[x+k] &gt; max(day[left],day[right])*/class Solution &#123;public: int kEmptySlots(vector&lt;int&gt;&amp; flowers, int k) &#123; int ans = INT_MAX; int n = flowers.size(); vector&lt;int&gt; days(n,0); for (int i = 0; i &lt; n; ++i) days[flowers[i]-1] = i + 1; int left = 0, right = k+1; int day = max(days[left],days[right]); for (int i = 1; right &lt; n; ++i)&#123; if (days[i] &gt; day) continue; if (i == right) // find one ans = min(ans,day); left = i; right = i+k+1; day = max(days[left],days[right]); &#125; return ans == INT_MAX ? -1 : ans; &#125;&#125;; 252. Meeting Rooms | Sort Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), determine if a person could attend all meetings. For example,Given [[0, 30],[5, 10],[15, 20]],return false. 1234567891011121314151617181920212223242526/** * Definition for an interval. * struct Interval &#123; * int start; * int end; * Interval() : start(0), end(0) &#123;&#125; * Interval(int s, int e) : start(s), end(e) &#123;&#125; * &#125;; */// sort with start time, itv[i].end&gt;itc[i+1].start -&gt; overloapclass Solution &#123;public: bool canAttendMeetings(vector&lt;Interval&gt;&amp; intervals) &#123; int n = intervals.size(); if (n == 0) return true; auto comp = [](Interval&amp; a, Interval&amp; b)&#123; return a.start &lt; b.start; &#125;; sort(intervals.begin(),intervals.end(),comp); for (int i = 0; i &lt; n-1; ++i) if (intervals[i].end &gt; intervals[i+1].start) return false; return true; &#125;&#125;; 253. Meeting Rooms II Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si &lt; ei), find the minimum number of conference rooms required. For example,Given [[0, 30],[5, 10],[15, 20]],return 2. 123456789101112131415161718192021222324252627/*sort with start &amp; sort with endi, j &lt;= iif si &lt; ej &lt;=&gt; i==j | when i comes, j is not end=&gt; overlap &amp;&amp; ej&lt;=i.end =&gt; since ej&lt;=i.end, add another room -&gt; i, next iele next j */class Solution &#123;public: int minMeetingRooms(vector&lt;Interval&gt;&amp; intervals) &#123; vector&lt;int&gt; starts, ends; for (auto i:intervals)&#123; // store with idx starts.push_back(i.start); ends.push_back(i.end); &#125; sort(starts.begin(),starts.end()); sort(ends.begin(),ends.end()); int ans = 0, j = 0; for (int i = 0; i &lt; intervals.size(); ++i) if (starts[i] &lt; ends[j]) ++ ans; // rnum[i.idx] = ans++; else // can schedule after j ++ j; // rnum[i.idx] = rnum[j++.idx] return ans; &#125;&#125;; follow up问题：把每个 meeting room 中的 intervals 打印出来 Given two lists of intervals, find their overlapping intervals. For example: l1: [1,5], [7,10], [12,18], [22,24], l2: [3,8], [13,15], [16,17], [18,21], [22,23]returns [3,5], [7,8], [13,15], [16,17], [18,18], [22,23] 1234567891011// if there is something wrong, please correct metwo pointers: i, jif Ai overlap Bj, cout &lt;&lt; overlap if ie = je, i++, j++, else if is &lt;= js, i++, je = ie + 1 else j++, ie = je +1else if is &lt; ie &lt;= js &lt; je, i++ else j++ 12345678910111213141516171819202122232425//sort with start &amp; sort with end, thenint count = 0, start = 0; for (int i = 0, j = 0; j &lt; ends.length;) &#123; if (i &lt; begs.length &amp;&amp; begs[i] &lt; ends[j]) &#123; if (++count == 2) &#123; // enter overlap start = begs[i]; &#125; i++; &#125; else if (i == begs.length || begs[i] &gt; ends[j]) &#123; if (--count == 1) &#123; // exit overlap res.add(new Interval(start, ends[j])); &#125; j++; &#125; else &#123; // begs[i] == ends[j] if (count &gt; 1) &#123; // already in overlap continue; &#125; res.add(new Interval(begs[i++], ends[j++])); &#125; &#125; return res; N个员工，每个员工有若干个interval表示在这段时间是忙碌的。求所有员工都不忙的intervals。每个subarray都已经sort好。举例： [[[1, 3], [6, 7]], [[2, 4]], [[2, 3], [9, 12]].]返回 [[4, 6], [7, 9]] 12345678910111213141516171819202122232425//sort with start &amp; sort with end, thenint count = 0, start = 0; for (int i = 0, j = 0; i &lt; begs.length;) &#123; if (begs[i] &lt; ends[j]) &#123; if (++count == 1) &#123; // exit free time if (start &gt; 0) &#123; res.add(new Interval(start, begs[i])); &#125; &#125; i++; &#125; else if (begs[i] &gt; ends[j]) &#123; if (--count == 0) &#123; // start free zone start = ends[j]; &#125; j++; &#125; else &#123; // begs[i] == ends[j] i++; j++; &#125; System.out.println(res); &#125; return res; ​ ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[What happens when you type an URL in the browser]]></title>
      <url>%2F2018%2F03%2F21%2FWhat-happens-when-you-type-an-URL-in-the-browser%2F</url>
      <content type="text"><![CDATA[Reference I what happens when you type in a URL in browser What happens when you type an URL in the browser and press enter? Process Attention: this is an extremely rough and oversimplified sketch, assuming the simplest possible HTTP request (no HTTPS, no HTTP2, no extras), simplest possible DNS, no proxies, single-stack IPv4, one HTTP request only, a simple HTTP server on the other end, and no problems in any step. browser checks cache; if requested object is in cache and is fresh, skip to #9 1) Browser cache. The browser maintains a repository of DNS records for a fixed duration for websites you have previously visited browser asks OS for server’s IP address 2) OS cache. the browser would make a system call (i.e. gethostname on Windows) to your underlying computer OS 3) Router cache. 4) ISP cache. Your ISP maintains its’ own DNS server which includes a cache of DNS records. OS makes a DNS lookup and replies the IP address to the browser DNS(Domain Name System) is a database that maintains the name of the website (URL) and the particular IP address it links to. The main purpose of DNS is human-friendly navigation. a recursive search since the search will continue repeatedly from DNS server to DNS server until it either finds the IP address we need or returns an error response saying it was unable to find it. call the ISP’s DNS server a DNS recursor -&gt; other DNS servers are called name servers eg. DNS recursor -&gt; root name server -&gt; .com domain name server -&gt; google.com name server, find the matching IP address ​ browser opens a TCP connection to server (this step is much more complex with HTTPS) TCP/IP three-way handshake: the client and the server exchange SYN(synchronize) and ACK(acknowledge) browser sends the HTTP request through TCP connection GET/POST request, also contain additional information such as browser identification (User-Agent header), types of requests that it will accept (Acceptheader), and connection headers asking it to keep the TCP connection alive for additional requests. browser receives HTTP response and may close the TCP connection, or reuse it for another request The server response contains the web page you requested as well as the status code, compression type (Content-Encoding), how to cache the page (Cache-Control), any cookies to set, privacy information, etc. browser checks if the response is a redirect or a conditional response (3xx result status codes), authorization request (401), error (4xx and 5xx), etc.; these are handled differently from normal responses (2xx) if cacheable, response is stored in cache browser decodes response (e.g. if it’s gzipped) browser determines what to do with response (e.g. is it a HTML page, is it an image, is it a sound clip?) browser renders response, or offers a download dialog for unrecognized types First, it will render the bare bone HTML skeleton. Then it will check the HTML tags and sends out GET requests for additional elements on the web page, such as images, CSS stylesheets, JavaScript files etc. These static files are cached by the browser so it doesn’t have to fetch them again the next time you visit the page. At the end, you’ll see the page Reference II 从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！ 从输入 URL 到页面加载完成的过程中都发生了什么事情？ Details 从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系） 浏览器多进程：Browser进程（主控），第三方插件进程，GPU进程，浏览器渲染进程（内核，默认每个Tab页面一个进程） 多线程的浏览器内核 解析URL：protocol://host:port/path/query#fragment 开启网络线程到发出一个完整的http请求（这一部分涉及到dns查询，tcp/ip请求，五层因特网协议栈等知识） DNS解析 -&gt; IP Adress tcp/ip请求构建：3次握手规则建立连接，断开连接时的四次挥手 五层因特网协议栈： 应用层(dns,http) DNS解析成IP并发送http请求 传输层(tcp,udp) 建立tcp连接（三次握手） 网络层(IP,ARP) IP寻址 数据链路层(PPP) 封装成帧 物理层(利用物理介质传输比特流) 物理传输（然后传输的时候通过双绞线，电磁波等各种介质） OSI七层框架：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层 表示层：主要处理两个通信系统中交换信息的表示方式，包括数据格式交换，数据加密与解密，数据压缩与终端类型转换等 会话层：它具体管理不同用户和进程之间的对话，如控制登陆和注销过程 从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等） 负载均衡：用户发起的请求都指向调度服务器（反向代理服务器，譬如安装了nginx控制负载均衡），然后调度服务器根据实际的调度算法，分配不同的请求给对应集群中的服务器执行，然后调度器等待实际服务器的HTTP响应，并将它反馈给用户 后台和前台的http交互（这一部分包括http头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等） 单独拎出来的缓存问题，http的缓存（这部分包括http缓存头部，etag，catch-control等） 强缓存（200 from cache）与协商缓存（304） 浏览器接收到http数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和domcontentloaded等） 解析HTML，构建DOM树 解析CSS，生成CSS规则树 合并DOM树和CSS规则，生成render树 布局render树（Layout(reflow)/reflow），负责各元素尺寸、位置的计算 绘制render树（paint），绘制页面像素信息 浏览器会将各层的信息发送给GPU，GPU会将各层合成（composite），显示在屏幕上 CSS的可视化格式模型（元素的渲染规则） 包含块（Containing Block） 控制框（Controlling Box） BFC（Block Formatting Context） 如何触发BFC？ 根元素 float属性不为none position为absolute或fixed display为inline-block, flex, inline-flex，table，table-cell，table-caption overflow不为visible IFC（Inline Formatting Context）：行内元素自身如何显示以及在框内如何摆放的渲染规则 JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等） 即时编译（JIT-Just In Time compiler） 读取代码，进行词法分析（Lexical analysis），然后将代码分解成词元（token） 对词元进行语法分析（parsing），然后将代码整理成语法树（syntax tree） 使用翻译器（translator），将代码转为字节码（bytecode） 使用字节码解释器（bytecode interpreter），将字节码转为机器码 JS的预处理阶段：Semicolon Insertion规则，分号补全，变量提升 JS的执行阶段 变量对象(Variable object，VO) 作用域链(Scope chain) this：this的值只取决中进入上下文时的情况 1234567891011121314var baz = 200;var bar = &#123; baz: 100, foo: function() &#123; console.log(this.baz); &#125;&#125;;var foo = bar.foo;// 进入环境：globalfoo(); // 200，严格模式中会报错，Cannot read property 'baz' of undefined// 进入环境：global barbar.foo(); // 100 回收机制 simple GC：mark and sweep（标记清除），引用计数 分代回收（Generation GC） 多回收“临时对象”区（young generation） 少回收“持久对象”区（tenured generation） 减少每次需遍历的对象，从而减少每次GC的耗时 其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[X4_Design Tiny URL | Skyline Problem]]></title>
      <url>%2F2018%2F03%2F17%2FX4-Design-Tiny-URL-Skyline-Problem%2F</url>
      <content type="text"><![CDATA[Design A Tiny URL systemSystem Design is always about trade-off &amp;&amp; weighing pros and cons &amp;&amp; constraints is also about sacrificing what is not needed &amp;&amp; optimizing what is most needed Problem Ask requirement first: uique URL &lt;-&gt; unique alias Ask Read or Write heavy: eg. Twitter: read heavy Constraints Amount of data to store Amount of traffic — QPS or the query-per-second rate(read) How many new URLs per second(write) Peak time / Hot spot(-&gt;Region) Projection (10X times) Scalability Numbers, eg. Daily active users: 1,000,000 Insert: Per day: 1,000,000 1%(function usage) 10(function frequency) = 100,000 Loop up: Per day: 1,000,000 100%(function usage) 3(function frequency) = 3,000,000 URLs: (lower case alphabet 26+upper case alphabet 26+ digit10)^length(=6) ~= 56.8 billions Design 接口: REST APIs Status Code: 1xx Informational responses; 2XX Success, 200 success, 201 created; 3XX Redirection, 301 moved permanently; 4xx Client errors; 5xx Server errors Google URL Shortener, json 存储: SQL or NoSQL? 是否需要丰富的 SQL Query？ NoSQL的SQL Query丰富度不如SQL，不过目前差距正在缩小，比如 MongoDB。此题不需要，该因素可以忽略。 是否追求效率？大多数Web Framework与SQL数据库兼容得很好(自带ORM(Object,-&gt; SQL dialect)，意味着可以少些很多代码。此题没太多业务逻辑，该因素可以忽略。 是否需要支持Transaction？ NoSQL不支持Transaction，但是可以在业务层做处理保证。 对QPS要求高不高？NoSQL性能高，MondoDB可以到10k级别，MySQL只能在k这个级别。 对Scalability的要求有多高？sharding，replica。 Number Average size of longURL = 100 bytes Average size of shortURL = 4 bytes(int) State = 4 byte Daily new URL = 3,000,000 108 = 324MB =&gt; Yearly new URL = 324365 = 118GB NoSQL, Randomly generate 6 characters containing [A-Z, a-z, 0-9] Use consistent hashing for partition: Partition By Key Or Consistent Hashing; Vitural nodes; Replication for high avaialbility Use NoSQL’s distributed key-value store Eventually consistent: quorum; others return checksum(eg. SHA1), if it is same with data -&gt; no need to lookup Short URL already exists? What to do with conflicts? Retry Write Optimization 1 Use centralized “Counter” to generate unique URL similar to auto-increment id in SQL Uniqueness guaranteed Write Optimization 2 Round robin to different URL generators, each governing a dedicate key space Partition key spaces such as “AXXXXX”, “BXXXXX” and etc. Similar to sharding - avoid conflicts SQL, id(primary key), long_url(unique index), created_at Map 6 characters containing [A-Z, a-z, 0-9] to an integer Base Conversion problem: base 62 More of single machine solution Schema? Other Factors to Consider High availability How to cache? Preload / Replace First use sharding(分片，根据region) to partition different regions You may have China DB and US DB for example Use redis / memcached LRU cache for repeated query Reuse popular short urls Store those popular urls based on clicks. Use the same short url Custom URLs (1) Use another table for custom URLs (SQL), since SQL use id rather than short_url Need to look up two tables now for read/write Atomicity not guaranteed in NoSQL (2) Use the same table with additional boolean column (NoSQL), short_url, long_url, created_at, custom(true/false) Same look up, need to query the boolean column Atomicity still guaranteed Not working well for SQL solution, which is auto id based Analytics (usage of URLs), eg. referrers, browsers, countires, patforms Automatic link expiration, add last_read_time Manual link removal in NoSQL, such in disk, Append only operation is faster, add alive(true/false) UI v.s. API User’s historical short urls, eg. with account system SQL index: use B+ tree index primary key, everytime use binary tree to find When primary key is declared, DBMS automatically creates unique index Often need additional indexes Using CREATE INDEX command, SQL indexes can be created on basis of any selected attribute Composite index Index based on two or more attributes Often used to prevent data duplication 218. The Skyline Problem reference OOD 123456789101112131415161718192021222324class Building implements Comparable&lt;Building&gt; &#123; int left; int right; int height; public Building(int left, int right, int height) &#123; this.left = left; this.right = right; this.height = height; &#125; @Override public int compareTo(Building o) &#123; if (this.height != o.height) &#123; return Integer.compare(this.height, o.height); &#125; if (this.left != o.left) &#123; return Integer.compare(this.left, o.left); &#125; return Integer.compare(this.right, o.right); &#125; @Override public String toString() &#123; return "Building [left=" + left + ", right=" + right + ", height=" + height + "]"; &#125;&#125; Other test case what if left meets right (B0[1 5 10], B1[5 9 10], B2[9 12 20], B3[12 1510]) -&gt; enter first, otherwise it will add to result (wrong) What if start at same and end at same (B0[1 17 3], B1[1 3 8], B2[1 4 2], B3[13 17 8], B4[14 17 2]) -&gt; when compare: if left1=left2, first enter larger height, if right1=right2, first leave smaller height code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970 /** * The Skyline Problem * city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Now suppose you are given the locations and height of all the buildings as shown on a cityscape photo (Figure A), write a program to output the skyline formed by these buildings collectively (Figure B). * The geometric information of each building is represented by a triplet of integers [Li, Ri, Hi], where Li and Ri are the x coordinates of the left and right edge of the ith building, respectively, and Hi is its height. It is guaranteed that 0 鈮� Li, Ri 鈮� INT_MAX, 0 &lt; Hi 鈮� INT_MAX, and Ri - Li &gt; 0. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.For instance, the dimensions of all buildings in Figure A are recorded as: [ [2 9 10], [3 7 15], [5 12 12], [15 20 10], [19 24 8] ] .The output is a list of "key points" (red dots in Figure B) in the format of [ [x1,y1], [x2, y2], [x3, y3], ... ] that uniquely defines a skyline. A key point is the left endpoint of a horizontal line segment. Note that the last key point, where the rightmost building ends, is merely used to mark the termination of the skyline, and always has zero height. Also, the ground in between any two adjacent buildings should be considered part of the skyline contour.For instance, the skyline in Figure B should be represented as:[ [2 10], [3 15], [7 12], [12 0], [15 10], [20 8], [24, 0] ].Notes: The number of buildings in any input list is guaranteed to be in the range [0, 10000]. The input list is already sorted in ascending order by the left x position Li. The output list must be sorted by the x position. There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...[2 3], [4 5], [7 5], [11 5], [12 7]...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...[2 3], [4 5], [12 7], ...] https://briangordon.github.io/2014/08/the-skyline-problem.html */ public List&lt;int[]&gt; getSkyline(int[][] buildings) &#123; if (buildings.length == 0) &#123; return Collections.emptyList(); &#125; Building[] lefts = new Building[buildings.length]; Building[] rights = new Building[buildings.length]; for (int i = 0; i &lt; buildings.length; i++) &#123; int[] b = buildings[i]; Building building = new Building(b[0], b[1], b[2]); rights[i] = lefts[i] = building; &#125; //sort according to left Arrays.sort(lefts, (a, b) -&gt; &#123; if (a.left != b.left) &#123; return Integer.compare(a.left, b.left); &#125; return Integer.compare(b.height, a.height); &#125;); //sort according to right Arrays.sort(rights, (a, b) -&gt; &#123; if (a.right != b.right) &#123; return Integer.compare(a.right, b.right); &#125; return Integer.compare(a.height, b.height); &#125;); System.out.println(Arrays.toString(lefts)); System.out.println(Arrays.toString(rights)); List&lt;int[]&gt; result = new ArrayList&lt;&gt;(); TreeSet&lt;Building&gt; set = new TreeSet&lt;&gt;(); // will use compareTo to compare int leftsIndex = 1; int rightsIndex = 0; int h = lefts[0].height; // max height of buildings in set int top = h; // last seen h set.add(lefts[0]); result.add(new int[] &#123; lefts[0].left, top &#125;); int index = 0; while (rightsIndex &lt; buildings.length) &#123; if (leftsIndex == buildings.length || rights[rightsIndex].right &lt; lefts[leftsIndex].left) &#123; index = rights[rightsIndex].right; System.out.println("Remove " + rights[rightsIndex]); set.remove(rights[rightsIndex++]); &#125; else &#123; index = lefts[leftsIndex].left; System.out.println("Add " + lefts[leftsIndex]); set.add(lefts[leftsIndex++]); &#125; System.out.println(set); h = set.isEmpty() ? 0 : set.last().height; if (h != top) &#123; top = h; result.add(new int[] &#123; index, top &#125;); &#125; &#125; return result; &#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051///*sol1: h[mostL...mostR]sol2:maintain a PQ &lt;height,end time&gt;cur = 0,nexT = PQ top end time;if cur.begT &gt; next // it ends before others coming pop all the buildings in Pq whose enttime &lt;= nextT;else&#123; push all the buildings at the same time,cur++ nexT = cur.beg&#125;//nexT = PQ's heightest building's end timecurH = PQ's heightest or 0;if != last height add curH,nexT*/class Solution &#123;public: vector&lt;pair&lt;int, int&gt;&gt; getSkyline(vector&lt;vector&lt;int&gt;&gt;&amp; buildings) &#123; vector&lt;pair&lt;int,int&gt;&gt; ans; priority_queue&lt;pair&lt;int,int&gt;&gt; aliveB; int cur = 0, nexT = 0, curH = 0, len = buildings.size(); while (!aliveB.empty() || (cur&lt;len))&#123; if (aliveB.empty()) nexT = buildings[cur][0]; else nexT = aliveB.top().second; if ((cur&gt;=len)||(buildings[cur][0]&gt;nexT)) while (!aliveB.empty() &amp;&amp; aliveB.top().second&lt;= nexT) aliveB.pop(); else&#123; nexT = buildings[cur][0]; while ((cur&lt;len)&amp;&amp;(buildings[cur][0]==nexT))&#123; aliveB.push(make_pair(buildings[cur][2],buildings[cur][1])); cur++; &#125; &#125; if (aliveB.empty()) curH = 0; else curH = aliveB.top().first; if ((ans.empty())||(ans.back().second!=curH)) ans.push_back(make_pair(nexT, curH)); &#125; return ans; &#125;&#125;; Interval: 253. Meeting Rooms II]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[System Design II]]></title>
      <url>%2F2018%2F03%2F17%2FSystem-Design-II%2F</url>
      <content type="text"><![CDATA[Scalability concepts Vertical scaling: CPU(more cores, L2 Cache…), Disk(PATA, SATA, SAS…; RAID), RAM… Horizontal scaling: get a bunch of slower or at least cheaper machines instand of plural number of machines Caching Load balancing: traffic come from people -&gt; distributed or balanced Database replication have master-slave; in case of database dies; if more read heavy &gt; write heavy =&gt; select statements go to server 2,3,4, any inserts, updates or deletes go to go to server 1 have master-master: can write any server; if connection down, you can read from master Database partitioning ​ Using NoSQL instead of scaling a relational database Being asynchronous how to deal with the two major bottlenecks: handling a lot of users, and handling a lot of data eg. Uber: A nice article about how Uber had to scale fast, about breaking your service into many micro services spread across many repos Facebook: How Facebook handles 800,000 simultaneous viewers on a live stream Twitter: How Twitter handles 3,000 image uploads per second and why the old ways it used would not work nowadays. Twitter subcomponents: Storing data (video | text), and Timeline (video | text). Salesforce: A relatively short example from Salesforce. Google, Youtube (video | text), Tumblr, StackOverflow, and Datashift. Warp-up You first build a high-level architecture by identifying the constraints and use cases, sketching up the major components and the relationships between them, and thinking about the system’s bottlenecks. You then apply the right scalability patterns that will take care of these bottlenecks in the context of the system’s constraints. eg. Scalable design Application Service layer Start with one machine Measure how far it takes us (load tests) Add a load balance + a cluster of machines over time: to deal with spike-y traffic, to increase availability Data storage 1) Billions of objects 2) Each object is fairly smaill(&lt;1K) 3) There are no relationships between the objects 4) Reads are 9x more frequent than writes (360 reads, 40 writes per second) 5) 3TBs of urls, 36GB of hases MySQL: Widely used Mature technology Clear acling paradigms(sharding, master/slave replication, master/master replication) Used by Facebook, Twitter, Google, etc. Index lookups are very fast mappings hash: varchar(6) original_url: varchar(512) 1) Create a uniquue index on the hash(36GB+). We want to hold it in memory. 2) Option 1: Vertival sacling of the MySQL machine 3) Option 2: Partition the data: 5 partitions, 600GB of data, 8GB of indexes 4) Master-slave (reading from the slaves, writes to the master) =&gt; Use one MySQL table with two varchar fields Create a uniquue index on the hash(36GB+). We want to hold it in memory to speed up lookups. Vertival sacling of the MySQL machine for a while Eventually, partition the data by taking the first chr of the hash mod the number of partitions. Thinks about a master-slave setup. Example: The Twitter Problem, The Summarization Problem]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode | Anagrams]]></title>
      <url>%2F2018%2F03%2F11%2FLeetCode-Anagrams%2F</url>
      <content type="text"><![CDATA[AnagramsProblem 242. Valid Anagram 1234567891011121314bool isAnagram(string s, string t) &#123; int l1=s.length(); if (l1!=t.length()) return false; vector&lt;int&gt; cnt(256,0); for (char ch:s) cnt[ch]++; for (char ch:t)&#123; cnt[ch]--; if (cnt[ch]&lt;0) return false; &#125; return true; &#125; 49. Group Anagrams 123456789101112131415// use sort &amp; hashmapvector&lt;vector&lt;string&gt;&gt; groupAnagrams(vector&lt;string&gt;&amp; strs) &#123; unordered_map&lt;string,multiset&lt;string&gt;&gt; ansmap; for (auto s:strs)&#123; string tmp = s; sort(tmp.begin(),tmp.end()); ansmap[tmp].insert(s); &#125; vector&lt;vector&lt;string&gt;&gt; ans; for (auto str:ansmap)&#123; vector&lt;string&gt; anstmp(str.second.begin(),str.second.end()); ans.push_back(anstmp); &#125; return ans;&#125; 12345678910111213141516171819202122// use primer to present numberpublic List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123; int[] prime = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103&#125;; List&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;&gt;(); HashMap&lt;Integer, Integer&gt; map= new HashMap&lt;&gt;(); for (String s : strs)&#123; int key = 1; for (char c : s.toCharArray()) key *= prime[c-'a']; //use index as value List&lt;String&gt; tmp; if (map.containsKey(key)) tmp = res.get(map.get(key)); else&#123; tmp = new ArrayList&lt;&gt;(); map.put(key, res.size()); res.add(tmp); &#125; tmp.add(s); &#125; return res;&#125; 438. Find All Anagrams in a String 123456789101112131415161718192021// Sliding windowvector&lt;int&gt; findAnagrams(string s, string p) &#123; vector&lt;int&gt; ans; vector&lt;int&gt; ch1(26,0), ch2(26,0); int l1 = s.length(), l2 = p.length(); if (l1&lt;l2) return ans; for (int i=0; i&lt;l2;i++)&#123; ch1[s[i]-'a']++; ch2[p[i]-'a']++; &#125; if (ch1==ch2) ans.push_back(0); for (int i=l2;i&lt;l1;i++)&#123; ch1[s[i-l2]-'a']--; ch1[s[i]-'a']++; if (ch1==ch2) ans.push_back(i-l2+1); &#125; return ans; &#125; 1234567891011121314151617181920public List&lt;Integer&gt; findAnagrams(String s, String p) &#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); if (s == null || s.length() == 0 || p == null || p.length() == 0) return res; int[] les = new int[256]; for (char c : p.toCharArray()) ++ les[c]; int l = 0, r = 0, cnt = p.length(); int len1 = p.length(), len2 = s.length(); while (r &lt; len2)&#123; // right letter s[r] exist in p that has been matched if (les[s.charAt(r++)]-- &gt;= 1) -- cnt; if (cnt == 0) res.add(l); // left letter s[l] exist in p that shoule be matched letter if (r - l == len1 &amp;&amp; les[s.charAt(l++)]++ &gt;= 0) cnt++; &#125; return res;&#125; 567. Permutation in String the first string’s permutations is the substring of the second string -&gt; find anagram 1234567891011121314151617181920// Silimar to 567bool checkInclusion(string p, string s) &#123; vector&lt;int&gt; ch1(26,0), ch2(26,0); int l1 = s.length(), l2 = p.length(); if (l1&lt;l2) return false; for (int i=0; i&lt;l2;i++)&#123; ch1[s[i]-'a']++; ch2[p[i]-'a']++; &#125; if (ch1==ch2) return true; for (int i=l2;i&lt;l1;i++)&#123; ch1[s[i-l2]-'a']--; ch1[s[i]-'a']++; if (ch1==ch2) return true; &#125; return false; &#125; 1234567891011121314151617public boolean checkInclusion(String s1, String s2) &#123; int [] les = new int[256]; for (char c : s1.toCharArray()) ++ les[c]; int l = 0, r = 0, cnt = s1.length(); int len1 = s1.length(), len2 = s2.length(); while (r &lt; len2)&#123; // right letter s[r] exist in p that has been matched if (les[s2.charAt(r++)]-- &gt;= 1) -- cnt; if (cnt == 0) return true; // left letter s[l] exist in p that shoule be matched letter if (r - l == len1 &amp;&amp; les[s2.charAt(l++)]++ &gt;= 0) cnt++; &#125; return false; &#125; ConclusionNormally it is related to HashMap, sort, two pointer]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[System Design I]]></title>
      <url>%2F2018%2F03%2F06%2FSystem-Design-I%2F</url>
      <content type="text"><![CDATA[System Design I reference eg. Design a url shortening service, like bit.ly Process Step 1: [Scope the problem] Use Cases Shortening: take a url =&gt; return a shorter url Redirection: take a short url =&gt; redirect to the original url Custom url: allow users to pick their available shortened URL High availability of the system Others: Analytics: to look at usage statistics Automatic link expiration: automatically expire link or stay alive forever Manual link removal: the user wants to remove the link UI vs API: design a web service or a website, or a URL shortening API Constraints the amount of traffic &amp; data: how many the requests a mouth should handle and how many new URLs per month should the site handle =&gt; per second approcimation eg. active users: Facebook, 1.3billion; Twitter, 650 million, new tweets made per day, 500 million =&gt; 1.5BN new tweets =&gt; All shortened URL per month 1.5BN =&gt; Site below the top 3: shorten 300M per monty =&gt; We: 100M new urls per month assume average lifetime: 1-2 weeks ~ 10 days &amp; assume 1 click per day, &amp; 20% got much more traffic than the rest 80% =&gt; 100 mln 10 days 1 click per day = 1 BN requests per month =&gt; 400+ requests per second 10% from shortening, 90% from redirection =&gt; 40 shortens, 360 redirections Total urls: 5 years X 12 months X 100M = 6 BN url 500 bytes per URL =&gt; total storage of urls over 5 yrs: 6BN X 500 bytes = 3TB log(62,6BN) =&gt; 6 bytes per hash =&gt; hases: 6BN X 6 bytes = 36GB New data written per second: 40 X (500+6) = 12K Data read per second: 360 X (500+6) = 180K =&gt; pic Step 2: [Sketch up an] Abstract design sketch the important components and the connections between them Aplication Design Shortening service: generate on your hash; check if it’s in the datastore, not -&gt; store a new mapping, or -&gt; generate new hash … Redirection service: Custom URL: take a hash from user, check if it’s a shorten URL word, check if it’s in the datastore, not -&gt; store, or -&gt; return a message Data storage layer (keep track of the hash =&gt; url mappings) Acts like a hash table: stores new mappings and retrieve a value given a key hashed_url = convert_to_base62(md5(original_url + random_salt))[:6] Step 3: [Think about the] bottlenecks eg. Perhaps your system needs a load balancer and many machines behind it to handle the user requests. Or maybe the data is so huge that you need to distribute your database on multiple machines. What are some of the downsides that occur from doing that? Is the database too slow and does it need some in-memory caching? traffic: not very challenging since it’s lightweight; think how we quickly look up URL lots of data Step 4: [Address these bottlenecks by using the fundamentals principles of scalable system design] Scaling your abstract design]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[571 Web Technologies Review]]></title>
      <url>%2F2018%2F02%2F20%2F571-Web-Technologies-Review%2F</url>
      <content type="text"><![CDATA[Midterm Review 571 Midterm 1 571 Midterm 2 571 Midterm 3 571 Midterm]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[X3_Binary Search]]></title>
      <url>%2F2018%2F02%2F10%2FX3-Binary-Search%2F</url>
      <content type="text"><![CDATA[Binary Tree Level Order Traversaltest case:cover different + corner case only left/right child full tree left child, right child, left child, right child… Follow Up: output the level to level reversely from bottom to up reverse funtion add from front Intersection of Two Arrays If non sort-&gt; Hashmap. Ues extra space. O(m+n) If sort-&gt; Two pointers. O(m+n) If no extra space / If n&gt;&gt;m, scan the smaller array and find it in larger one via binary search in -&gt; If already sort -&gt; O(m*logn) Intersection of k arrays? merge 的变种 ​ Dot Production (FB)Conduct Dot Product of two large sparse Vectors find non-zero indexes intersection dot product Find K-th Smallest Pair Distance 1234567891011int lo = 0;int hi = nums[num.length - 1] - nums[0];while (lo &lt; hi)&#123; int mid = lo + ((hi - lo) &gt;&gt;&gt; 1); //...&#125;// count function = number of pairs with distance &lt;= guessif (nums[right] - nums[left] &gt; guess) continue;count += right - left; Runtime: N^2*logW Optimization since there may be duplicate -&gt; 12right = upperBound(nums, left+1, n-1, target);count += right - left -1 Optimization II Use Map to memorize Binary Search -&gt; N logN * logW Others410. Split Array Largest SumCopy Books, The Painter’s Partition Problem Part IIexpire maphttps://www.quora.com/How-can-I-implement-expiry-key-hashmap-in-Java cannot remove element while using for loop, but can use interator https://stackoverflow.com/questions/6092642/how-to-remove-a-key-from-hashmap-while-iterating-over-it 1234567891011121314151617181920212223242526272829303132333435363738394041424344class ExpiringKey implement Comparable&lt;ExpiringKey&gt; &#123; V val; long expirationTime; // ttl K k; &#125; class ExpringMap &#123; Map&lt;K, ExpiringKey&gt; m = new HashMap&lt;&gt;(); PriorityQueue q V get(Key k) &#123; ExpiringKey v = this.m.get(k); if (v == null) &#123; return null; &#125; if (v.expirationTime &lt; System.currentTimeMillis()) &#123; m.remove(k); return null; &#125; return v.val; &#125; void put(Key k, V val, long expirationTime) &#123; ExpiringKey expiringKey = new ExpiringKey(val, expirationTime); this.m.put(k, expiringKey); this.q.add(expiringKey); // log(k) &#125; void cleanup() &#123; // q.poll() log(k) List&lt;K&gt; keys = new ArrayList&lt;&gt;(); for (ExpiringKey entry : this.m.entrySet()) &#123; if (entry.getValue().expirationTime &lt; System.currentTimeMillis()) &#123; keys.add(entry.getKey()); &#125; &#125; for (K key : keys) // delete &#125; // PriorityQueue&lt;&gt;() minHeap &#125; optimization: use PriorityQueue Trick search 1234567891011// search in java, return indexif (index&gt;=0)&#123; set.add(num); l = index;&#125;else&#123; index = -(index+1); //next one who is larger than it if (index &gt;= r) break; l = index;&#125; Difference between &gt;&gt;&gt; and &gt;&gt; &gt;&gt;&gt; is unsigned]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[How to write a basic Web Crawler]]></title>
      <url>%2F2018%2F02%2F09%2FHow-to-write-a-basic-Web-Crawler%2F</url>
      <content type="text"><![CDATA[How to write a basic Web CrawlerInstallation IntelliJ IDEA or Eclipse Crawler4j: Download latest crawler4j-x.x-jar-with-dependencies.jar Creat new a new project &amp; Add External JARs Project Structure (CTRL +SHIFT +ALT + S on Windows/Linux, ⌘ + ; on Mac OS X) -&gt; Libraries , click + Write classes as Quickstart Controller with main function 1234567891011121314151617181920212223242526public class Controller &#123; public static void main(String[] args) throws Exception &#123; String crawlStorageFolder = "/data/crawl"; int numberOfCrawlers = 7; CrawlConfig config = new CrawlConfig(); config.setCrawlStorageFolder(crawlStorageFolder); /* * Instantiate the controller for this crawl. */ PageFetcher pageFetcher = new PageFetcher(config); RobotstxtConfig robotstxtConfig = new RobotstxtConfig(); RobotstxtServer robotstxtServer = new RobotstxtServer(robotstxtConfig, pageFetcher); CrawlController controller = new CrawlController(config, pageFetcher, robotstxtServer); /* * For each crawl, you need to add some seed urls. These are the first * URLs that are fetched and then the crawler starts following links * which are found in these pages */ controller.addSeed("http://www.viterbi.usc.edu/"); /* * Start the crawl. This is a blocking operation, meaning that your code * will reach the line after this only when crawling is finished. */ controller.start(MyCrawler.class, numberOfCrawlers); &#125;&#125; MyCrawler extends WebCrawler 12345678910111213141516171819202122232425262728293031323334353637383940public class MyCrawler extends WebCrawler &#123; private final static Pattern FILTERS = Pattern.compile(".*(\\.(css|js|gif|jpg" + "|png|mp3|mp3|zip|gz))$");/** * This method receives two parameters. The first parameter is the page * in which we have discovered this new url and the second parameter is * the new url. You should implement this function to specify whether * the given url should be crawled or not (based on your crawling logic). * In this example, we are instructing the crawler to ignore urls that * have css, js, git, ... extensions and to only accept urls that start * with "http://www.viterbi.usc.edu/". In this case, we didn't need the * referringPage parameter to make the decision. */ @Override public boolean shouldVisit(Page referringPage, WebURL url) &#123; String href = url.getURL().toLowerCase(); return !FILTERS.matcher(href).matches() &amp;&amp; href.startsWith("http://www.viterbi.usc.edu/"); &#125; /** * This function is called when a page is fetched and ready * to be processed by your program. */ @Override public void visit(Page page) &#123; String url = page.getWebURL().getURL(); System.out.println("URL: " + url); if (page.getParseData() instanceof HtmlParseData) &#123; HtmlParseData htmlParseData = (HtmlParseData) page.getParseData(); String text = htmlParseData.getText(); String html = htmlParseData.getHtml(); Set&lt;WebURL&gt; links = htmlParseData.getOutgoingUrls(); System.out.println("Text length: " + text.length()); System.out.println("Html length: " + html.length()); System.out.println("Number of outgoing links: " + links.size()); &#125; &#125;&#125; Do not forget import! 123456import edu.uci.ics.crawler4j.crawler.CrawlConfig;import edu.uci.ics.crawler4j.crawler.CrawlController;import edu.uci.ics.crawler4j.fetcher.PageFetcher;import edu.uci.ics.crawler4j.robotstxt.RobotstxtConfig;import edu.uci.ics.crawler4j.robotstxt.RobotstxtServer; 1234567import java.util.Set;import java.util.regex.Pattern;import edu.uci.ics.crawler4j.crawler.Page;import edu.uci.ics.crawler4j.crawler.WebCrawler;import edu.uci.ics.crawler4j.parser.HtmlParseData;import edu.uci.ics.crawler4j.url.WebURL; And change your main class to com.company.Controller Some Issue SLF4J: Failed to load class “org.slf4j.impl.StaticLoggerBinder”.SLF4J: Defaulting to no-operation (NOP) logger implementationSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details. Go to https://www.slf4j.org/download.html and download the newest slf4j package in http://repo2.maven.org/maven2/org/slf4j/slf4j-simple/1.7.25/. Add slf4j-simple-1.7.25jar to your project Exception in thread “main” java.lang.Exception: couldn’t create the storage folder: /data/crawl does it already exist ? Use absolute folder path, such as /Users/XXX/Desktop/XXX/HW2_WebCrawler/data/crawl If you didn’t get any result visit the website on your browser first]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java | Programming Fundations: Object-Oriented Design]]></title>
      <url>%2F2018%2F02%2F05%2FJava-Programming-Fundations-Object-Oriented-Design%2F</url>
      <content type="text"><![CDATA[Programming Fundations: Object-Oriented DesignQ &amp; Term Objects are always physical or visible items. [False] Responsibilities should be stored in one master object. [False] Single Responsibility Principle and Open/Closed Principle are two of the principles of object-oriented design that are grouped under the acronym SOLID. Instantiation Data hiding/encapsulation FURPS: function, usability, reliability, performance, supportability Controlling visibility: Keeping an attribute private but creating a public operation to return the value of the attribute An interface contains [method signature] that have no functionality. Design patterns are split into the creational, structural, and behavioral groups. Core Concepts class: name, attribution, behavior Abstraction Encapsulation: rescrict access -&gt; information hiding or data hiding Inheritance Polymorphism: do the correct behavior for each one. Object-Oriented Analysis and Design Process Gather your requirements: Must-do Functional Requirements: Feature/Capabilities Non-Funciontal Requirements: Help, Legalm Performance, Support, Security -&gt; FURPS(Function, Usability, Reliability, Performance, Supportability) +Design requirements, Implementation r, Interface r, Physical r describe the application identify the most important objects describe the interaction between those objects create a class diagram UML(Unified modeling Language) Utilizing Use Cases Title(What is the goal) + Actor(Who esires it) + Scenario(How is it accomplished) + Extensions/Precondition/… Use case diagram User Story: As a (type of user), I want (goal), so that (reason) | User Stories | Use Cases || —————————— | ————————– || short - one index card | long - a document || one goal, no details | multiple goals and details || informal | casual to (very formal) || “placeholder for conversation” | “record of conversation” | Domain Modeling(Modeling the APP) Identifying objects: Noun List in User Case Scenario -&gt; select as Conceptual Object Model Identifing class relationships: link &amp; symbol Identifing class responsibilities: Verb List(what has happend/whose job) -&gt; rename &amp; split Using CRC(Class,, ) cards Class name Responsibility of the class Collaboratior: the other classes it interacts with Creating Classes Class Diagram: Visibility: -private +public | Class name | eg. Product | Spaceship || ———- | —————————————- | —————————————- || Attributes | - name: String = “New Product”- isActive: Boolean- launchDate: Date- itemNumber: Integer | + name: String- shieldStringth: Integer… || Operations | + getName(): String+ setActive(Bollean)+ getProductDetails(): String+ displayProduct()- formatProductDetails(): String | + fire(): String+ reduceShields(Integer)… | Code 123456789101112131415public class Spaceship&#123; // instance variables public String name; private int ShieldStringth; //method public String fire()&#123; return "Boom!"; &#125; public void reduceShields(int amount)&#123; ShieldStringth -= amount; &#125;&#125; 12345678910111213141516171819@interface Spaceship: NSObject&#123; @public NSString *name; @private int shieldStringth;&#125;//method declarations- (NSString *) fire;- (void) reduceShields:(int) amount;@end @implementation Spaceship- (NSString *) fire&#123; return @&quot;Boom!&quot;;&#125;- (void) reduceShields:(int) amount&#123; shieldStringth -= amout;&#125;@end Class lifetime Instantiation 123456Java Customer fred = new Costomer();C# Customer fred = new Costomer();VB.NET Dim fred As New CustomerRuby fred = Customer.newC++ Customer *fred = new Costomer();Obective-C Customer *fred = [[Customer alloc] init]; Constructoe example 1234567891011121314public class Spaceshio&#123; ... // constructor method public Spaceship()&#123; name = "Unnamed ship"; shieldStringth = 100; &#125; //overloaded constructor public Spaceship(String n)&#123; name = n; shieldStrength = 200; &#125; ...&#125; Destructors/Finalizers called when an object is being deleted/deallocated/released Use for releasing resources A destructor is called when disposing of an object that is no longer necessary. Using static/shared members Static variables 12345678910111213141516171819202122232425public class SacingsAccount&#123; // instance variables public String accountMnumber; private Money balance; //static variables /* //public (accessible) static variable public static float interestRate; // changed to private */ private static float interestRate //public static methods /*static methods can only access static variable, static data.*/ public static setInterestRate(float r)&#123; interestRate = r; &#125; public static getInterestRate()&#123; return interestRate; &#125; ...&#125;//access normal instance-level variablesthe name of the object.accountNumber//access a public static/shared variablethe name of the class.interetRate Inheritance and Compostion Using inheritance: “IS A” 1234567Java public class Album extends Product&#123;...&#125;C# public class Album : Product&#123;...&#125;VB.NET Public Class Album Inherits Product ...Ruby class Album &lt; Product ...C++ class Album : public Product&#123;...&#125;Objective-C @interface Album : Product &#123;...&#125; Overriding 123456Jave super.doSomething();C# base.doSomething();VB.NET Mybase.doSomething();Ruby super do_somethingObjective-C [super someMethod];C++ NamedBaseClass::doSomething(); Using abstract Class 12Java abstract class BankAccount&#123;...&#125;VB.NET Public MustInherit Class BankAccount ... Using Interfaces 12345678910111213141516// not allowed to put functionality inside an interfaceinterface Printable&#123; //method sigature void print(); void printToPDF(String filename);&#125;// if implements the interface -&gt; have to provide those 2 methods and implementation for themclass MyClass implements Printable&#123; //method bodies public void print()&#123; //provide implementation &#125; public void printToPDF(String filename)&#123; //provide implementation &#125;&#125; Benefits: Could have many different classes choose to implement the same interface. eg. In Java I’d use instance of other languages do it different ways, but the concept is the same, we can just ask, does the object that I have support that particular interface, if it does, I know I can use it. 123456while (genericObject in listOfObjects)&#123; if (genericObject instanceOf Printable)&#123; // if it implements the interface, we can use it genericObject.print(); &#125;&#125; | &lt;&gt;Printable || —————————- || print()printToPDF() | Using aggregation and composition Aggregation: “HAS A” relationship of Inheritation Composition: a more specific form of Aggregation, implies ownership eg. Classroom[1] ——aggregation —— Student[*] If deleted the Classroom Object, perhaps the class got canceled -&gt; Student objects won’t destroyed, they may be used in different classrooms or just be able to live on their own Document[1] —— composition(implies ownership) —— Page[1…*] But if I were to delete the Document object all the associated Page objectsshould be deleted too Advanced Concepts Structural/Static diagrams: Class D -&gt; But they are not so great at representing the lifetime of an object or actually how objects interact with one other -&gt; Behavior/Dynamic diagrams: Sequence D(eg. Pleanse see 04:20’s pic) UML Diagrams: Class Diagram, Use Case D, Object D, Sequence D, State Machine D, Activity D, Deploment D, Package D, Component D, Profile D, Communication D, Timing D, Composite Structure D, Interaction Overview D UML Tools: Please see 01:32’s pic or Wikipedia page Object-Oriented Design Patterns “Gang of Four” / “GoF” book: Creational Patterns, Structural P, Behavioral P eg. the Singleton Pattern ensure a class only has one instance one way of accessing it 12345678910111213141516171819202122232425public class MySingleton&#123; // placeholder for current singleton object private static MySingleton _me = null; // private constructor - now no other object can instantiate private MySingleton()&#123;&#125; // this is how you ack for the singleton public static MySingleton getInstance()&#123; // do I exist? if (_me == null)&#123; // if not, instantiate and store _me = new MySignleton); &#125; return _me; &#125; // additional functionality public someMethod()&#123;//...&#125;&#125; // ask for the singleton MySingleton single = MySingleton.getInstance(); //use it single.someMethod(); //or even just call it directly MySingleton.getInstance.someMethod(); eg. the Memento Pattern Handles “undo” in an object Does not violate encapsulation Originator: original state, Caretaker, Moemento C requestes O saveState =&gt; O creates a M: O: os, M, and it bundles the information up in the M and returns it to the C =&gt; C:M, O:os call to the O to change state =&gt; O:changed state calls can from C or others =&gt; O: changed again revert to a particular state: C:M hands back M to O =&gt; O:changed again, M, C and ask it to restore to itself =&gt; O: os Object-Oriented Design Priciples General Softwre Development Pricibles DRY: Don’t Repeat Yourself YAGNI: You Ain’t Gonna Need it Example Code Smells Long methods, Very short(or long) identifiers, Pointless comments God object: one master object that tries to do everything in the program, or at least one object that seems to be doing very different responsibilities that have nothing to do with each other -&gt; need to be revisited and broken apart Feature envy: If a class seems to do very little except use all the methods of one other class -&gt; need to rethink the roles of one or the other SOLID Priciples S: Single Responsibility Principle: object should have one reason to exist, one reason to change - one primary responsibility O: Open/Closed Principle: open for extension, but closed to modification eg. Inheritance: if get a new business requirement -&gt; support it by adding a new class, privide some new code if it need a new business behavior, don’t change the original superclass L: Liskov Substitution Principle: derived classes must be substitutable for their base classes if we’ve created a whole bunch of derived classes or child classes, no one can be treated specially I: Interface Segregation Principle: Multiple spefic interfaces are better than one general purpose interface those lists of methods should be as small as possible. If they start to get bigger, they should be split up into smaller interfaces.Because classes can choose to implement multiple smaller interfaces, no classshould be forced to support huge lists of methods that it doesn’t need. D: Dependency Inversion Principle: depend on abstractions, not on concretions eg. Store — AudioFileReader &amp; AudioFileWriter Add a layer of abstraction -&gt; make it more flexibility Store — Reader — MovieFileReader, AudioFileReader, … ​ — Writer — MovieFileWriter, AudioFileWriter, … GRASP(General Responsibility Assignment Software Patterns) Principles Creator, Controller, Pure Fabrication, Information Expert, High Cohesion, Indirection, Low Coupling, Polymorphism, Protected Variations Expert/Information Expert: Assign the reponsibility to the class that has the information needed to fulgfill it Creator: Who is responsible for creating an object? Low Coupling/High Cohesion Coupling: the level of dependencies between objects -&gt; do reduce the amount of requirement connections between objects - Cohesion: the level that a class contains focused, related behaviors a measure of how focused the internal behavior of a class is. Are all its behaviors related to that single responsibility? eg. God object has low cohesion Controller: Don’t connect UI elements directly to business objects(problem: high coupling, low cohesion) eg. Business Object &lt;-&gt; Controller Object: eg. Model View Controller &lt;-&gt; User Interface Object Pure Fabrication: When the behavior does not belong anywhere else, create a new class if force that behavior into an existing class where it doesn’t belong -&gt; decreasing Cohesion -&gt; so we fabricate a new class Indirection: to reduce coupling, introduce an intermediate object If you have multiple objects that need to talk to each other -&gt; HIGH COUPLING -&gt; so put an Ondirection Object to simplify the amount of connections -&gt; decrease coupling between objects Polymorphism: automatically correct behavior based on type As opposed to: conditional logic that checks for particular type -&gt; we want to reduce checks Protected Variations: protect the system from changes and viriations How to design a system so that changes and variations have the minimum impact on what already exists Identify the most likely points of change Use multiple techniques: encapsulation, LSP, OCP… Conclusion Objective-Oriented Languages | Language | Inheritance | Typing | Call to super | Private Methods | Abstract Classes | Interfaces || ———– | ———– | ————– | ————— | ————— | —————- | ————– || Java | Single | static | super | Yes | Yes | Yes || C# | Single | static | base | Yes | Yes | Yes || VB.NET | Single | static | Mybase | Yes | Yes | Yes || Objective-C | Single | static/dynamic | sper | No | No | Protocols || C++ | Multiple | static | name of class:: | Yes | Yes | Abstract Class || Ruby | Mix-ins | dynamic | super | Yes | n/a | n/a || JavaScript | Prototype | dynamic | n/a | Yes | n/a | n/a | Additional resources Software Requirements by Karl Wiegers Alistair Cockburn’s Writing Effective Use Cases Mike Cohn’s User Stories Applied/User Stories Applied for Agile Software Development UML Distilled &amp; Refactoring by Martin Fowler Head First Design Patterns]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[X2_Wiggle Sort]]></title>
      <url>%2F2018%2F02%2F04%2FX2-Wiggle-Sort%2F</url>
      <content type="text"><![CDATA[Subsequence: order, maynot continuous QuickSort: Average O(NlgN), worst O(N2) MergeSort: O(NlgN) QFind the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element. For example, Given [3,2,1,5,6,4] and k = 2, return 5. [3,3,3,3] and k = 1, return 3. Ak starts with 1, Assume k is valid sol1sort O(NlgN) sol2 Max-Heap, O(Nlgk) sol3 quick select randomly choose/middle as privot (..discard…pivot…index….) time complexity: n/2 + n/4 + n/8 + … = n duplicate -&gt; just move it, don’t influence worst case: all the number is same 12345678910111213141516171819202122232425262728293031323334353637383940414243444546 /**O(N) guaranteed running time + O(1) spacerandomize/shuffle the input -&gt; O(N)This is QuickSelect from QuickSort. */ public int findKthLargest(int[] nums, int k) &#123; int start = 0, end = nums.length - 1, index = nums.length - k; while (start &lt; end) &#123; int pivot = partition(nums, start, end); if (pivot &lt; index) &#123; start = pivot + 1; &#125; else if (pivot &gt; index) &#123; end = pivot - 1; &#125; else &#123; return nums[pivot]; &#125; &#125; // sample input: [1] return nums[start]; &#125; private int partition(int[] nums, int start, int end) &#123; int pivot = start; while (start &lt;= end) &#123; while (start &lt;= end &amp;&amp; nums[start] &lt;= nums[pivot]) &#123; start++; &#125; while (start &lt;= end &amp;&amp; nums[end] &gt; nums[pivot]) &#123; end--; &#125; if (start &gt; end) &#123; break; &#125; swap(nums, start, end); &#125; swap(nums, end, pivot); return end; &#125; private void swap(int[] a, int i, int j) &#123; int tmp = a[i]; a[i] = a[j]; a[j] = tmp; &#125; Sort Color 0..0[l]1…1[r]2…2 123456789101112131415public void sortColors(int[] nums) &#123; // If nums is very big, it is likely to often hit page default by loading // three sections of nums (l,m,r) and cause thrashing int l = 0; int r = nums.length - 1; for (int m = 0; m &lt;= r;) &#123; if (nums[m] == 0) &#123; swap(nums, l++, m++); //unless l == m, left = 0; left must be 1, no need to consider again &#125; else if (nums[m] == 2) &#123; swap(nums, r--, m);//since right may be 0/1/2, should consider again &#125; else &#123; m++; &#125; &#125;&#125; What if 4 section 0, 1, [2,3]; then partition 2 &amp; 3 more pointers? Wiggle Sort IGreedy Wiggle Sort IIFind Median: (nums.length+1) &gt;&gt;&gt; 1, O(N) Partition: sort color + Vitural Index, O(N) 1234567 n = 6 =&gt; (n | 1) = 7 n = 7 =&gt; (n | 1) = 7 The index mapping, (1 + 2 * index) % (n | 1)/*vitual position: 135024, let num[135]&gt;num[024],then actual position 012345 will be wiggle sort.*/ 1234567891011121314151617181920212223242526272829public void wiggleSort2(int[] nums) &#123; if (nums == null || nums.length &lt; 2) &#123; return; &#125; int median = findKthLargest(nums, (nums.length + 1) &gt;&gt;&gt; 1); int n = nums.length; int left = 0, i = 0, right = n - 1; // The index mapping, (1 + 2*index) % (n | 1) combined with 'Color sort' while (i &lt;= right) &#123; int index = newIndex(i, n); if (nums[index] &gt; median) &#123; swap(nums, newIndex(left++, n), index); i++; &#125; else if (nums[index] &lt; median) &#123; swap(nums, newIndex(right--, n), index); &#125; else &#123; i++; &#125; &#125; &#125; // n = 6 =&gt; 012345-&gt;[1 3 5 0 2 4], 6 | 1 =&gt; 7 // n = 7 =&gt; 0123456-&gt;[1 3 5 0 2 4 6], 7 | 1 =&gt; 7 private int newIndex(int index, int n) &#123; return (1 + 2 * index) % (n | 1); &#125; expiry key hashmap in JavaHow can I implement expiry key hashmap in Java? 12345678class ValueWithExpiration &#123; V val; long expirationTime;&#125;Map&lt;K, ValueWithExpiration&gt;ttl =&gt; expirationTime follow up: When get/put expirationTime? Map =&gt; linear scan ? =&gt; PriorityQueue]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode | Intersection of Two Arrays]]></title>
      <url>%2F2018%2F02%2F02%2FLeetCode-Intersection-of-Two-Arrays%2F</url>
      <content type="text"><![CDATA[349. Intersection of Two ArraysNote: Each element in the result must be unique. -&gt; use set The result can be in any order. 123456789101112131415161718192021222324252627282930//javapublic int[] intersection(int[] nums1, int[] nums2) &#123; if (nums1 == null || nums2 == null) return null; if (nums1.length == 0 || nums2.length == 0) return new int[0]; Set&lt;Integer&gt; hs = new HashSet&lt;Integer&gt;(); for (int i = 0; i &lt; nums1.length; i++) &#123; hs.add(nums1[i]); &#125; Set&lt;Integer&gt; res = new HashSet&lt;Integer&gt;(); for(int i = 0;i &lt; nums2.length;i++)&#123; if (hs.contains(nums2[i])) &#123; res.add(nums2[i]); hs.remove(nums2[i]); &#125; &#125; int[] res_ = new int[res.size()]; int i = 0; for (Integer num : res) &#123; res_[i++] = num; &#125; return res_; &#125;/*Using Stream in java 8Set&lt;Integer&gt; set = Arrays.stream(nums2).boxed().collect(Collectors.toSet());return Arrays.stream(nums1).distinct().filter(e-&gt; set.contains(e)).toArray();*/ 123456789//c++ vector&lt;int&gt; intersection(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123; unordered_set&lt;int&gt; s(nums1.begin(), nums1.end()); vector&lt;int&gt; ans; for (int num : nums2) if (s.erase(num)) ans.push_back(num); return ans; &#125; Follow up If sorted? Use 2 pointers. O(M+N) Binary search. O(MlogN) or O(NlogM) 350. Intersection of Two Arrays IINote: Each element in the result should appear as many times as it shows in both arrays. The result can be in any order. 12345678910111213141516171819202122//javapublic int[] intersect(int[] nums1, int[] nums2) &#123; HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;(); ArrayList&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;(); for (int i = 0; i &lt; nums1.length; i++)&#123; if (map.containsKey(nums1[i])) map.put(nums1[i],map.get(nums1[i])+1); else map.put(nums1[i],1); &#125; for (int i = 0; i &lt; nums2.length; i++)&#123; if (map.containsKey(nums2[i]) &amp;&amp; map.get(nums2[i]) &gt; 0)&#123; res.add(nums2[i]); map.put(nums2[i],map.get(nums2[i])-1); &#125; &#125; int[] res_ = new int[res.size()]; int i = 0; for (Integer num : res) res_[i++] = num; return res_; &#125; 12345678//java 8 using StremMap&lt;Integer, Long&gt; map = Arrays.stream(nums2).boxed().collect(Collectors.groupingBy(e-&gt;e, Collectors.counting()));return Arrays.stream(nums1).filter(e -&gt;&#123; if(!map.containsKey(e)) return false; map.put(e, map.get(e) - 1); if(map.get(e) == 0) map.remove(e); return true; &#125;).toArray(); 12345678910111213141516171819//Another solution in C++vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123; sort(nums1.begin(),nums1.end()); sort(nums2.begin(),nums2.end()); int n1 = nums1.size(), n2 = nums2.size(); int i = 0, j =0; vector&lt;int&gt; ans; while (i&lt;n1 &amp;&amp; j&lt;n2)&#123; if (nums1[i]==nums2[j])&#123; ans.push_back(nums1[i]); i++,j++; &#125; else if (nums1[i]&gt;nums2[j]) j++; else i++; &#125; return ans; &#125; Follow up: What if the given array is already sorted? How would you optimize your algorithm? Use 2 pointers, O(M+N) What if nums1‘s size is small compared to nums2‘s size? Which algorithm is better? Use the smaller array to construct the counter hash. What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once? Divide and conquer. Do repeatedly: Slice nums2, caculate intersections, write partial results back to the memory.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java console in Sublime Text]]></title>
      <url>%2F2018%2F01%2F31%2FJava-console-in-Sublime-Text%2F</url>
      <content type="text"><![CDATA[Tools -&gt; Build System -&gt; New Build System… 12345678910111213&#123; &quot;shell_cmd&quot;: &quot;javac \&quot;$file\&quot;&quot;, &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;, &quot;selector&quot;: &quot;source.java&quot;, &quot;variants&quot;: [ &#123; &quot;name&quot;: &quot;Run&quot;, &quot;shell_cmd&quot;: &quot;java $file_base_name&quot; &#125; ]&#125; Save as JavaC.sublime-build Choose Automatic, run using command + B 12var fName = function(fVal) &#123;&#125;; console.log(fName(fVal)); Delete build system1OS X: ~/Library/Application Support/Sublime Text 3/Packages/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[X1_Binary Search Tree]]></title>
      <url>%2F2018%2F01%2F31%2FX1-Binary-Search-Tree%2F</url>
      <content type="text"><![CDATA[Binary Search TreeReferenceBinary Search Tree | Set 1 (Search and Insertion) Github | X1_Binary Search Tree Definition left subtree &lt; root &lt; right subtree no duplicate nodes What if duplicate? add “count” attribution self-balance: almost full tree. Using red-black tree worst case: 12345671\2\3\4\5\6or 1 2 3 45/6 7\8 ​ Coding• https://leetcode.com/problems/find-k-closest-elements • https://leetcode.com/problems/closest-binary-search-tree-value • https://leetcode.com/problems/closest-binary-search-tree-value-ii • https://leetcode.com/problems/binary-tree-level-order-traversal • https://leetcode.com/problems/maximum-depth-of-binary-tree • https://leetcode.com/problems/balanced-binary-tree • https://leetcode.com/problems/search-in-rotated-sorted-array • https://leetcode.com/problems/search-in-rotated-sorted-array-ii ####Note 先定signature 库函数Arrays.binarySearch(arr, x)，not found: &lt; 0 java8 Collectors 1private static final double EPSILON = 1e-10; boilerplate模版 主动测试test case 1Queue&lt;T&gt; q = new LinkedList&lt;&gt;(); IterativeInOrder, Pre, Post Q 360.Sort Transformed Array a &gt; 0, binary search find the closest one with -b/2a, then … Or from l &amp; r -&gt; middle 173.Binary Search Tree iterator]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CSS-tricks/Oline helper]]></title>
      <url>%2F2018%2F01%2F23%2FCSS-tricks-Oline-helper%2F</url>
      <content type="text"><![CDATA[#ImgContainers with background images which zoom within their container on hover: Zooming Background ImagesOr you can test it online: css background image zoom with transitionMaybe you just want to clip it to a complex shape, here is CSS clip-path maker #FontUse Google Fonts API to add fonts to your web pages.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JavaScript console in Sublime Text]]></title>
      <url>%2F2018%2F01%2F18%2FJavaScript-console-in-Sublime-Text%2F</url>
      <content type="text"><![CDATA[Tools -&gt; Build System -&gt; New Build System… 123456&#123;// &quot;shell_cmd&quot;: &quot;make&quot; &quot;cmd&quot;: [&quot;node&quot;, &quot;$file&quot;, &quot;$file_base_name&quot;], &quot;working_dir&quot;: &quot;$&#123;project_path:$&#123;folder&#125;&#125;&quot;, &quot;selector&quot;: &quot;*.js&quot;&#125; Save as JavaScript.sublime-build Choose Automatic/JavaScript, run *.js 12var fName = function(fVal) &#123;&#125;; console.log(fName(fVal));]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[LeetCode | SQL]]></title>
      <url>%2F2017%2F11%2F09%2FLeetCode-SQL%2F</url>
      <content type="text"><![CDATA[[TOC] ProblemsBasic182. Duplicate Emails1234SELECT DISTINCT EmailFROM PersonGROUP BY EmailHAVING COUNT(*) &gt; 1; 183. Customers Who Never Order12345SELECT c.Name AS CustomersFROM Customers AS cWHERE c.Id NOT IN( SELECT CustomerId FROM Orders); 184. Department Highest Salary12345678SELECT d.Name AS Department, e.Name AS Employee, e.Salary FROM Employee e, Department dWHERE e.DepartmentId = d.Id AND e.Salary = ( SELECT MAx(Salary) FROM Employee e2 WHERE e2.DepartmentId = d.Id); 196. Delete Duplicate Emails123DELETE p1FROM Person p1, Person p2WHERE p1.Email = p2.Email AND p1.Id &gt; p2.Id; 197. Rising Temperature123SELECT w1.IdFROM Weather w1, Weather w2WHERE TO_DAYS(w1.Date) = TO_DAYS(w2.Date)+1 AND w1.Temperature &gt; w2.Temperature; JOIN175. Combine Two Tables123SELECT p.FirstName, P.LastName, A.City, A.SateFrom Perosn P LEFT JOIN Address AON P.PersonID = A.PersonId; 181. Employees Earning More Than Their Managers1234SELECT a.Name AS EmployeeFROM Employee a JOIN Employee bON a.ManagerId = b.IdWHERE a.Salary &gt; b.Salary; Rank176. Second Highest Salary123SELECT Max(Salary) AS SecondHighestSalaryFROM EmployeeWHERE Salary &lt; (SELECT Max(Salary) FROM Employee) 177. Nth Highest Salary123456789101112CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INTBEGINDECLARE M INT;SET M=N-1; RETURN ( # Write your MySQL query statement below. SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT M, 1 );END 178. Rank Scores12345678910# Write your MySQL query statement belowSELECT Scores.Score, COUNT(Ranking.Score) AS RankFROM Scores, ( SELECT DISTINCT Score FROM Scores) RankingWHERE Scores.Score &lt;= Ranking.ScoreGROUP BY Scores.Id, Scores.ScoreORDER BY Scores.Score DESC;-- If only group by Score, same score will be combined 180. Consecutive Numbers123SELECT DISTINCT l1.Num as ConsecutiveNums FROM Logs l1, Logs l2, Logs l3WHERE l1.Id=l2.Id-1 AND l2.Id=l3.Id-1 AND l1.Num=l2.Num AND l2.Num=l3.Num 123456789101112-- using user-defined variablesSELECT DISTINCT Num as ConsecutiveNums FROM( SELECT Num, @count := if (@prev = Num, @count+1, 1) count, @prev := Num prev FROM Logs, ( SELECT @count:=0, @prev:=(SELECT Num FROM Logs LIMIT 1) )tmp1 )tmp2WHERE tmp2.count&gt;=3; 185. Department Top Three Salaries123456789SELECT d.Name AS Department, e.Name AS Employee, e.Salary AS Salary FROM Employee e, Department dWHERE ( SELECT COUNT(distinct(Salary)) FROM Employee WHERE DepartmentId = e.DepartmentId AND Salary &gt; e.Salary) in (0,1,2)AND e.DepartmentId = d.IdORDER BY e.DepartmentId, E.Salary DESC; Basic knowledgeLinks SQL Tutorial SQLCourse SQLCourses SELECT - extracts data from a database12345678910111213141516171819202122232425262728293031323334353637SELECT column1, column2, ...FROM table_nameWHERE condition;# Search for a patternNOT LIKE or LIKE '%s%'# NOT starting with "b", "s", or "p"LIKE '[!bsp]%'# Starts with "a" &amp; at least 3 characters in lengthLIKE 'a_%_%'# Between an inclusive rangecolumn_name BETWEEN value1 AND value2or NOT BETWEENe.g. WHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;# To specify multiple possible values for a columncolumn_name IN (value1,value2,...) or IN (SELECT STATEMENT)&lt;&gt; or !==,...AND, OR, NOTIS NULL or IS NOT NULL# [] = optionalORDER BY column1, column2, ... [ASC|DESC];# return only distinct (different) values.SELECT DISTINCT Country FROM Customers;!NOTE: COUNT(DISTINCT column_name) is not supported in Microsoft Access databases.SELECT COUNT(DISTINCT Country) FROM Customers;SELECT Count(*) AS DistinctCountriesFROM (SELECT DISTINCT Country FROM Customers); 12345678910111213141516# SQL Server / MS Access Syntax:SELECT TOP number|percent column_name(s)FROM table_nameWHERE condition;e.g. SELECT TOP 3 or SELECT TOP 50 PERCENT # MySQL Syntax:SELECT column_name(s)FROM table_nameWHERE conditionLIMIT number;# Oracle Syntax:SELECT column_name(s)FROM table_nameWHERE ROWNUM &lt;= number; 1MIN(), MAX(), COUNT(), AVG(), SUM() UPDATE - updates data in a database1234567UPDATE table_nameSET column1 = value1, column2 = value2, ...WHERE condition;# can write column1 = column1 + 1# If you omit the WHERE clause, ALL records will be updated! DELETE - deletes data from a database12345DELETE FROM table_nameWHERE condition;# If you omit the WHERE clause, all records in the table will be deleted!DELETE [*] FROM table_name; INSERT INTO - inserts new data into a database123# If only insert in specified columns, others = nullINSERT INTO table_name [(column1, column2, column3, ...)]VALUES (value1, value2, value3, ...); ALIASE - give a table, or a column in a table, a temporary name12345678910111213141516171819202122232425261. SELECT column_name AS alias_nameFROM table_name;# It requires double quotation marks or square brackets if the alias name contains spaces.[Contact Person]# Combine columnse.g. SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS AddressFROM Customers;# But in MySQLSELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS AddressFROM Customers;2.SELECT column_name(s)FROM table_name AS alias_name;e.g.SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerNameFROM Customers, OrdersWHERE Customers.CustomerName="Around the Horn" AND Customers.CustomerID=Orders.CustomerID;=&gt;SELECT o.OrderID, o.OrderDate, c.CustomerNameFROM Customers AS c, Orders AS oWHERE c.CustomerName="Around the Horn" AND c.CustomerID=o.CustomerID; JOIN - combine rows from two or more tables, based on a related column between them1234567891011121314151617SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDateFROM OrdersINNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;# Join three TablesSELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperNameFROM ((OrdersINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);# Self JOINe.g.SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.CityFROM Customers A, Customers BWHERE A.CustomerID &lt;&gt; B.CustomerIDAND A.City = B.City ORDER BY A.City; -GROUP BY statement - used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.123SELECT COUNT(CustomerID), CountryFROM CustomersGROUP BY Country; Operators12345UNION, UNION ALL with duplicate valuesHAVING, EXISTS, WHERE column_name operator ANY/ALL (SELECT column_name FROM table_name WHERE condition) Comments12-- Single line/*Multi-line*/ DATABASE CREATE DATABASE - creates a new database DROP DATABASE - drop an existing SQL database ALTER DATABASE - modifies a databaseTABLE CREATE TABLE - creates a new table 1234567891011CREATE TABLE table_name ( column1 datatype, column2 datatype, column3 datatype, ....);CREATE TABLE new_table_name AS SELECT column1, column2,... FROM existing_table_name WHERE ....; DROP TABLE - deletes a table ALTER TABLE - modifies a table 12345678910111213141516ALTER TABLE table_nameADD column_name datatype;ALTER TABLE table_nameDROP COLUMN column_name;# ALTER/MODIFY COLUMN# SQL Server / MS Access:ALTER TABLE table_nameALTER COLUMN column_name datatype;# My SQL / Oracle (prior version 10G):ALTER TABLE table_nameMODIFY COLUMN column_name datatype;# Oracle 10G and later:ALTER TABLE table_nameMODIFY column_name datatype; CREATE INDEX - creates an index (search key) DROP INDEX - deletes an index …]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Leetcode | Maximum Length of Repeated Subarray]]></title>
      <url>%2F2017%2F11%2F06%2FLeetcode-Maximum-Length-of-Repeated-Subarray%2F</url>
      <content type="text"><![CDATA[718. Maximum Length of Repeated Subarray Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays. Example 1:123456Input:A: [1,2,3,2,1]B: [3,2,1,4,7]Output: 3Explanation: The repeated subarray with maximum length is [3, 2, 1]. Note: 1&lt;= len(A), len(B) &lt;= 1000 0 &lt;= A[i], B[i] &lt; 100 ! subarray, not subsequence I. DP, Similar to LCS Time Complexity: O($L_A$x $L_B$) Space Complexity: O($L_A$x $L_B$)12345678910111213141516//c++class Solution &#123;public: int findLength(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) &#123; int l = A.size(),ans = 0; vector&lt;vector&lt;int&gt;&gt; dp(l,vector&lt;int&gt;(l,0)); for (int i=0;i&lt;l;i++)&#123; for (int j=0;j&lt;l;j++)&#123; if(i == 0 || j == 0) dp[i][j] = (A[i]==B[j]); else dp[i][j] = (A[i]==B[j]) ? dp[i-1][j-1]+1:0; ans = max(ans,dp[i][j]); &#125; &#125; return ans; &#125;&#125;; II. Optimization DP Time Complexity: O($L_A$x $L_B$) Space Complexity: O($L_A$)123456789101112131415161718192021//c++class Solution &#123;public: int findLength(vector&lt;int&gt;&amp; A, vector&lt;int&gt;&amp; B) &#123; int m = A.size(); int n = B.size(); vector&lt;int&gt; dp(n + 1); int result = 0; for (int i = 1; i &lt;= m; ++i) &#123; vector&lt;int&gt; ndp(n + 1); for (int j = 1; j &lt;= n; ++j) &#123; if (A[i-1] == B[j-1]) &#123; ndp[j] = dp[j-1] + 1; result = max(ndp[j], result); &#125; &#125; dp = ndp; &#125; return result; &#125;&#125;; III. Optimization 2 DP Time Complexity: O($L_A$x $L_B$) Space Complexity: O(1)since dp[i][j] only depends on dp[i-1][j-1], we only need to keep it and traverse the matrix diagonally.1234567891011121314151617181920212223242526//Javapublic int findLength(int[] A, int[] B) &#123; int maxLen = 0; for (int j = 0; j &lt; B.length; j++) &#123; int maxLenEnding = 0; for (int i = 0, k = j; i &lt; A.length &amp;&amp; k &lt; B.length; i++, k++) &#123; if (A[i] != B[k]) maxLenEnding = 0; else &#123; maxLenEnding++; maxLen = Math.max(maxLen, maxLenEnding); &#125; &#125; &#125; for (int i =1; i &lt; A.length; i++) &#123; int maxLenEnding = 0; for (int j = 0, k = i; k &lt; A.length &amp;&amp; j &lt; B.length; j++, k++) &#123; if (A[k] != B[j]) maxLenEnding = 0; else &#123; maxLenEnding++; maxLen = Math.max(maxLen, maxLenEnding); &#125; &#125; &#125; return maxLen; &#125; IV. HashMap 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//c++struct Node &#123; int len; Node *ch[101], *f; Node() : len(0), f(NULL) &#123; memset(ch, 0, sizeof ch); &#125;&#125;;struct SAM &#123; Node *last, *root; SAM() &#123; root = last = new Node(); &#125;; void add(int c) &#123; Node *e = new Node(), *tmp = last; e-&gt;len = last-&gt;len + 1; for (; tmp &amp;&amp; !tmp-&gt;ch[c]; tmp = tmp-&gt;f) tmp-&gt;ch[c] = e; if (!tmp) &#123; e-&gt;f = root; &#125; else &#123; Node *nxt = tmp-&gt;ch[c]; if (tmp-&gt;len + 1 == nxt-&gt;len) e-&gt;f = nxt; else &#123; Node *np = new Node(); *np = *nxt; np-&gt;len = tmp-&gt;len + 1; nxt-&gt;f = e-&gt;f = np; for (; tmp &amp;&amp; tmp-&gt;ch[c] == nxt; tmp = tmp-&gt;f) tmp-&gt;ch[c] = np; &#125; &#125; last = e; &#125;&#125;;class Solution &#123;public: int findLength(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) &#123; SAM a = SAM(); for (int x : A) a.add(x); int ans = 0, cur = 0; Node *t = a.root; for (int i = 0; i &lt; B.size() &amp;&amp; t; ++i) &#123; int idx = B[i]; while (t != a.root &amp;&amp; !t-&gt;ch[idx]) &#123; t = t-&gt;f; cur = t-&gt;len; &#125; if (t-&gt;ch[idx]) &#123; t = t-&gt;ch[idx]; cur++; &#125; if (cur &gt; ans) ans = cur; &#125; return ans; &#125;&#125;; 相关题目 115. Distinct Subsequencescount the number of distinct subsequences of S which equals TDP, O(n) space 123456789101112131415161718class Solution &#123;public: int numDistinct(string s, string t) &#123; int l1 = s.length(), l2 = t.length(), tmp, pre; vector&lt;int&gt; dp(l2+1,0); dp[0] = 1; for (int i=1;i&lt;=l1;i++)&#123; pre = 1; for (int j=1;j&lt;=l2;j++)&#123; tmp = dp[j]; dp[j] = dp[j] + (s[i-1]==t[j-1] ? pre:0); pre = tmp; &#125; cout &lt;&lt; endl; &#125; return dp[l2]; &#125;&#125;; 最大连续子序列和，乘积，最长递增子串，最长公共子串，子序列等问题(动态规划等) Some programs are online.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MDS（multidimensional scaling）Map]]></title>
      <url>%2F2016%2F05%2F29%2FMDS%EF%BC%88multidimensional-scaling%EF%BC%89Map%2F</url>
      <content type="text"><![CDATA[MDS（multidimensional scaling）多维尺度分析模式识别之 MDS Multidimensional Scaling 多维尺度法 分析及Matlab实现 A Nonlinear Mapping for Data Structure AnalysisA Nonlinear Mapping for Data Structure Analysis PPTA Nonlinear Mapping for Data Structure Analysis wiki Sammon ProjectionSammon Mapping]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[百度面试总结]]></title>
      <url>%2F2016%2F05%2F08%2FBaiduInterview%2F</url>
      <content type="text"><![CDATA[首先说一下侥幸心理，当时收到百度通知去大厦面试的时候心里活动如下（懵^n想着居然过了笔试，也是real可怕，还是很开心的去了。申的是Web前端研发实习岗其实是有点心虚的，大一大二算是知识的巅峰期，目前就是以抛物线的形式下降。收到面试通知以后强行找了一些题目，临时抱了一下大腿，倒没有完全写过。很多已经处于知道有这个，似乎是因为什么，具体怎么描述既不大清了。。。果然今天面试的时候就跪了 大幸是一面和二面对我比较和善，有幸面了三面。一面二面都比较基础，一面主考HTMK/CSS，还有用js写一个函数（用到了递归的思想，还是比较简单的）,二面的时候被问了关于从一维数组构造树的问题，一开始答的一般，没有考虑输入的乱序，例如pid可能不存在，后来就说也是类似递归呗，往上生成。其实一面二面都是很简单的问题，还有就是因为太久没用js写这类实际问题的函数，连数组用push都忘了。显而易见，也被一面和二面都提了说我js基础不够的问题。但到了三面已经明显看到力不从心了。同样问了一下比较基础的内容，依旧有点答不清楚（其实还是那几个inner、block、inner-block，display/visibility，事件绑定，ajax，get/post等等。其实是知道的，但是当时自己都觉得答的混乱。（顺便一说，这几个其实一二三面有重叠的问道，但是中间间隔的时候我没有好好回顾。。。二面面完12:30左右，给时间吃午餐，然后13:00一面，所以也就没吃。。。（后来发现我算是进度快的，大部分人都是一面结束再1点开始。 再回归正文。三面这里就比较惨了，给了时间让我现场google然后说区别，一开始限制用英文，后来说都可以（不过中英文倒还好，最多看的速度差异。。。），还有一些现场code test，他应该也看出来我基础的问题了，说写伪代码也行。问我用过什么框架，我也就最多一个bootstrap，也没用过node.js（果然还是深入不够，后期就得自我反思了。。。总之我后面自己都心虚了。。。然后他打算从别的地方看看我的优点，例如算法什么的。。。就问我搜索字符串什么方法，我的想法非常naive，肯定有问题。他后来给了用KPM、BP（这个时候我还是懵 写到这里应该能意识到我妥妥地跪了，最后他就让我问一个问题，我就问我距离百度还需要做多大努力。。他说了一些（综合思想是很多。。后来再想问，就被打断说只有一个问题。。一脸尴尬的我不过三面的时候还有基础面一定只有我了QAQ感觉面试官还是很帅气很有思想的，当时感觉好年轻一定很厉害所以就很开心地做过去了。。。果然被虐的很厉害。在等hr过来收表格的时候可能也有点尴尬，稍微问了点别的，比如学校什么的，然后又说现在还是不够之类的，说大学毕业也不能忘记算法（其实并无毕业。。。），问了面试官是本科毕业工作么，然后了解到他是社招。然后也了解到，其实还会问关于前端项目的注意点啦，比如说性能啊安全多屏幕适配等等（应该看我比较弱渣所以没问到这个。。。（然而我内心os是这个还稍微能扯点似乎，毕竟还是写过项目，只是好久没写了。。。另外还有一个问题就是学校里接触的项目要求不是很高，自己也没太花功夫。。 所以结果这样还是意料之中的，自嘲为北京一日游也是真心的。所以开心的和小伙伴约了饭，和当时一起面试的几个学长学姐留了微信，有缘再见啦果然还是有很多路要走，继续加油咯我，还有你们～ 啊，最后说一句，当时好想要三面面试官的邮箱或者微信之类的联系方式，没敢。。。无比后悔ing]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[算法－图论－Kruskal]]></title>
      <url>%2F2016%2F04%2F22%2Falgorithm-Kruskal%2F</url>
      <content type="text"><![CDATA[23.2-1 对于同一个输入图，Kruskal算法返回的最小生成树可以不同。这种不同来源于对边进行排序时，对权重相同的边进行的不同处理。证明：对于图G的每棵最小生成树T，存在一种办法来对G的边进行排序，使得Kruskal算法所返回的最小生成树就是T。 直接想法就是再加一个在输入时边的顺序（即相同权重看哪条边存储的在前面就选哪条）。。。这能怎么证明&gt;&lt; 顺便po上为了解决这个问题顺便复习和思考的内容（对，思考XD 相关 Kruskal算法是每次选择权重最小的边加入森林，它的本质是贪心算法。 如果该图所有的边均不相同，那么我们可以证明最小生成树唯一 如果各边权值唯一，从最小生成树开始，每次加一条边i并在新生成的环上删除最大的一条边j（满足权值$e_i$ &lt; $e_j$），这时会得到一棵新的生成树，如果我们加入的那条边满足 $e_j$- $e_i$最小，那么得到的就是第二小的生成树。从这个第二小的生成树开始，进行同样的操作可以得到第三小的生成树。这个迭代过程中树的权值是一直递增的，所以不可能出现相同权值的多棵最小生成树。 对于给定的图而言,因为最小生成树的权值和是确定的,所以最小生成树不唯一当且仅当最小生成树的形状不唯一 可证明最小生成树T与任意生成树T’，对边进行排序$w_1$ &lt;= $w_2$ &lt;= … &lt;= $w_n$ , $w_1’$ &lt;= $w_2’$ &lt;= … &lt;= $w_n’$ 有 $w_i’$ &lt;= $w_i’$ 如果i时第一个有 $w_i’$ &lt; $w_i$，即有$wn$ &gt;= $w{n-1}$ &gt;= … &gt;=$w_i$ &gt; $wi’$ &gt;= $w{i-1}’$ &gt;= … &gt;= $w_1’$。 所以如果我们选择{$w_1’$ … $w_i’$}中某边加入T，要么产生与{$w1$ … $w{i-1}$}产生环，要么就是{$w1$ … $w{i-1}$}中某边。 所以在选择边 $e1$ … $e{i-1}$ 后有n-i+1个联通分量，再加入边 $e_1’$ … $e_i’$ 后仍为n-i个联通分量，但事实上，因为来自于生成树T’，所以边 $e_1’$ … $e_i’$ 能够有n-i个联通分量 所以矛盾。 另，最小生成树唯一性判定 对图中每条边，扫描其他边，如果存在相同权值的边，则对该边进行标记； 然后用Kruskal（或者Prim）算法求MST（最小生成树）； 求得MST后，如果该MST中未包含做了标记的边，即可判定MST唯一；如果包含作了标记的边，则依次去掉这些边再求MST，如果求得的MST权值和原MST权值相同，即可判定MST不唯一。 转某版23.1-8 把一个连通无向图的生成树边按权值递增排序，称排好序的边权列表为有序边权列表，则任意两棵最小生成树的有序边权列表是相同的。（算法导论） 证： 设最小生成树有n条边，任意两棵最小生成树分别称为A, B, 如果e是一条边，用w(e)表示该边的权值。&nbsp;&nbsp;&nbsp;A的边按权值递增排序后为a1, a2,……an w(a1)≤w(a2)≤……w(an)&nbsp;&nbsp;&nbsp;B的边按权值递增排序后为b1, b2,……bn w(b1)≤w(b2)≤……w(bn)&nbsp;&nbsp;&nbsp;设i是两个边列表中，第一次出现不同边的位置，ai≠bi&nbsp;&nbsp;&nbsp;不妨设w(ai)≥w(bi)&nbsp;&nbsp;&nbsp;情形1 如果树A中包含边bi，则一定有j&gt;i使得 bi=aj ,事实上,这时有 w(bi)=w(aj)≥w(ai) ≥w(bi) 故 w(bi)=w(aj)=w(ai)，在树A的边列表中交换边ai和 aj的位置并不会影响树A的边权有序列表，两棵树在第i个位置的边变成同一条边。&nbsp;&nbsp;&nbsp;情形2 树A中并不包含边bi，则把bi加到树A上，形成一个圈，由于A是最小生成树，这个圈里任意一条边的权值都不大于w(bi) ，另外，这个圈里存在边aj不在树B中。因此，有w(aj)≤w(bi)，且j&gt;i (因为aj不在B中)。于是，有w(bi)≤w(ai)≤w(aj)≤w(bi)，因此 w(ai)= w(aj) = w(bi)。那么在树A中把aj换成bi仍然保持它是一棵最小生成树，并不会影响树A的边权有序列表，并且转换成情形1。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何基于场景设计产品－笔记（20160418）]]></title>
      <url>%2F2016%2F04%2F22%2Fchanpin20160418%2F</url>
      <content type="text"><![CDATA[###场景的定义是什么 “场景”最早出现在电影、电视剧的制作过程中，而在互联网产品中，指用户需求的“环境”。 用户场景 -&gt; 用户需求，场景不同，需求不同 场景包括用户自身，外部环境：如网络等人、事的不同流程与状态 场景下的需求即用户使用的出发点 -&gt; 设计产品迭代、维护等 为什么要基于场景设计产品 产品已成为场景下的体验 与传统产品的工具性需求不同，互联网，以人为重心，讲究人与互联网的结合。可能成本低廉，但能满足人的更深层次的需求。 满足情感上的、个性化的需求。而这些是与产品分不开的，例如和朋友聚餐、情侣约会和自己吃饭是不一样的 例子：微信红包（“伪”需求）+春节场景 -&gt; 场景点燃情感，情感点燃需求 =&gt;产品融入了场景 = 基本功能＋附加值 =&gt; 打动用户 移动终端加速了产品场景化 之前的PC等，对位置等是有一定限制的，而移动终端则有更多的场景，有更多的产品需求，催生了产品相应的价值。 特殊场景，如定位类：百度地图，O2O百度糯米 O2O产品扩展了产品的边界 线上和线下的联系 -&gt; 扩展了产品边界：比如百度糯米，现在有了团购产品，线上团购，线下消费。从用户获得消息，线下消费 从团队化、标准化到定制化、个性化：从套餐 -&gt; 打折券 新的场景出现，如定电影票 具体例子:百度手机卫士 来去电飘窗，前置化场景的功能，接打电话时手机出现小飘窗出现这个号码的当前信息 因为用户在接打电话之前了解是否是诈骗电话等，所以必须在当前环境下实现。 需求用户不会告诉你 -&gt; PM提炼成可以在产品上实现的需求，例如：骚扰电话多 = 电话的场景下，让用户提前知道电话的信息 悬浮窗：手机桌面上的小圆点，点击可加速 为什么是悬浮窗，为什么是加速 使用手机不知道什么时候会变慢变卡，所以手机卡慢贯穿整个使用的场景，而悬浮窗有这个特质，安卓手机可设置从而在所有界面都能看到 =&gt; 所以只有悬浮窗可以满足需求，也只有手机卡慢可以放在上面 -&gt; 场景和需求的结合 手机加速功能分支下的小功能 有哪些场景下，用户会有额外典型的手机加速的需求？如玩游戏，因为需要性能 -&gt; 所以设置成，启动游戏时自动加速 为什么基于场景 -&gt;因为产品已经成为特定场景下的体验 思考用户需求，思考在这个用户需求下的场景，现在的环境是什么，然后再把场景细分 -&gt; 可能有比较能打动人心的新的点 同学提问： 如何去发现“伪场景”：场景和需求结合在一起，我们可以说 如果是伪场景，那一定也是伪需求；所以其实本质是如何发现伪需求。那么我觉得可以有几点参考：不关注用户说什么而多关注用户做什么；实际去调研，去体会；关心用户最终的目标 老师你好，如何确定一个功能是强需求高频率的呢，靠用户调研？：用户调研当然是最简单也最直接的方式；但是在有些情况下，用户调研也会说谎，如果我们没有能力进行调研，我们就可以通过拆解需求，拆解功能，找到功能的本质，进而去发现功能是否是高频的；比如抢红包，拆解以后是不是还有小额转账的功能，这就是一个高频需求 我想问下产品的特性是全面好还是单点极限表达好？：核心需求单点极限，初期产品单点极限，但是也不是绝对；比如o2o 永远是越多越好 场景细分一般可以从那些层面和纬度去进行细分：可以从场景中涉及到的所有人和事开始，然后每个人、每个事 是否有不同的状态 请问老师，在产品初期没有用户的时候怎么做用户体验 用户场景的设置？： 我觉得还是需求的拆解，需求拆解到极致，一定是可以找到切入点的。把这个切入点和已经存在的场景来寻找互通 一个产品在多个场景下应用时不同需求冲突该如何解决？： 一个产品在多个场景下应用时不同需求冲突该如何解决？ 做竞品分析的时候，如何快速分析出一个产品的定位？：还是看功能 如果说产品朝个性化定制化方向发展，是不是意味着我们做出来的产品可能会比较小众化：个性化是手段，不是目的；小众产品也可以很优秀的呀 刚才您提到微信的抢红包功能，当时它不是用户可能会想得到的或者可能需要的需求，它是微信上有了才慢慢被接受，您认为是一位的做用户需求调查重要呢？还是脑洞大开一下更重要一点？ ： 调查一定是有的，脑洞大开也保不准，但是根本还是其创造者抓住了发红包这种情感的宣泄点，有理有据，才能引爆 老师您好，请问在产品推出后，如何去做到更好的维护这个产品，以及如果因为时间等某些因素面临场景的改变怎么办：你指的维护产品可能就是产品的迭代和生长吧，产品也像一个孩子，要明白在不同的阶段 让它做不同的事情吧 如何筛选场景呢？不可能满足所有场景：按产品核心需求排优先级，看看场景是否解决了或者契合了核心需求 一个产品的核心功能的满足会不会因为场景的满足而产生偏移呢？：需求和场景分不开，如果核心功能被满足，那就是核心场景被满足，然后引发的是额外高阶的需求，那就是不同的场景了 说用户需求就会谈到用户体验，如何理解这两者：大概就是手动挡和自动挡的区别 老师能说明一些产品迭代的不同时期，考虑的不同需求吗？并且如何考虑的：不是产品迭代左右需求，是需求催生了产品迭代 请问老师，随着产品功能的不断扩展，某些功能可能会与其他产品的某种功能发生叠加，这个时候我们是选择保留这种功能还是放弃以保留产品的独特性？：思考为什么会出现重叠？思考去掉或者保留的利弊 请问老师，是应该是让场景下的功能无限接近用户需求，还是应该让用户能无限适应场景下的功能： 很好的问题，找平衡，因为需求有时候是伪需求，或者说不完美的需求，你要有自己的判断 请问老师，针对刚才被提到的同质化问题，如果已知自主设计的产品会被模仿的情况下应采取何种设计产品的策略呢，采取模仿别人的策略有何不妥：不要忘了产品的初衷，是解决用户需求，而不是应对别人的模仿 老师我想请问：那您觉得如果设计一款产品是很全面好呢，比如一个APP包涵了衣食住行的各种O2O服务、也包含了手机安全等功能；还是纯粹地分别设计安全app、团购app、酒店住宿app比较好？因为现在确实手机app越来越纷繁复杂，用户难以选择，而且审美疲劳或是选择疲劳也会导致用户选择乏力，那么您认为将来的趋势是：针对越来越细分的场景和用户需求设计越来越小众的app呢，还是推出一款返璞归真的app，包含尽可能多的功能和场景需求。哪一种可能更成功？： 嗯 我觉得这个问题很好；我的回答是，这不是选择的问题，而是能力的问题；现在没有什么企业可以把一个app做到包含你的所有功能而又不显得臃肿，繁杂，无所适从；试想，如果真的出现了一个真正意义的人工智能app，只需要你一句话就能满足所有需求，何乐而不为呢？ 先让大家把每个点做到极致，再考虑综合的问题吧 请问如何判断一个产品是否成功了呢？装机量？用户正面评价？营收额？受到资本青睐？：求仁得仁喽 在产品功能愈发齐全、场景需求愈发得到满足的背景下，以场景为思路来改进产品功能是否容易陷入瓶颈?是否以后对产品的改进会更加趋向于个性化定制?： 是可能会陷入瓶颈，不过还是那句话 个性化是手段 不是目的，更多还是要发现新场景新需求 用户调研如何发现潜在的需求：多关心用户真正去做什么 互联网产品在现在市场下的发展趋势：发展肯定会越来越好，互联网化是大趋势了，会影响生活的方方面面 现在很多互联网公司所推出的应用都提到了上述所提功能，那么在竞争激烈、同质化严重的市场环境下，企业要如何保证自己的产品能在某个特定场景下最受用户的青睐：可以从产品、运营各个方面来回答。如果说特定场景下，那一定是产品的体验做到极致 悬浮窗一般在电脑上使用，复制到手机上，如何解决用户在手机屏幕这么小的空间上因为使用悬浮窗而带来的不适感（屏幕被霸占感觉）？：可以从感情上找一些共鸣，比如设计的趣味性、个性化、娱乐性。如果实在不喜欢，还可以隐藏呀 请问有什么工具或原则来高效设计用户场景吗？：设计用户场景我觉得这个说法可能不合适，用户场景需要我们去深入的理解，需要我们设计的 是产品的形态 所以用你的大脑去设计用户场景吧 百度手机卫士，360手机卫士和手机管家的产品定位有区别吗？：对用户的核心需求上没有区别，但是结合产品在公司的战略意义，会有战略上的区别 说用户需求就会谈到用户体验，如何理解这两者：大概就是手动挡和自动挡的区别 学生团队如何做到从0到1？寻找怎样的平台？怎样的契机？：我觉得去做就很好了，哪怕是从0到0以后，还能剩下的东西 就是100 是应该是让场景下的功能无限接近用户需求，还是应该让用户能无限适应场景下的功能：很好的问题，找平衡，因为需求有时候是伪需求，或者说不完美的需求，你要有自己的判断 请问百度手机卫士APP首页上的“家人防护”是基于什么样的场景，它为什么能有这么高的优先级？：这个就属于成熟型产品的一个方向性尝试吧。出现一个新功能前三个月只能全是市场实验，新功能的出现可以改变生活态度，但是要被市场接收还需要好的营销！和用户习惯的养成 产品的路远没有人人都是产品经理这句话说的这么简单。多体会，多思考，多实践。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[［整理/转载］Github＋HEXO (Mac)（二）]]></title>
      <url>%2F2016%2F04%2F14%2FNewBlog2%2F</url>
      <content type="text"><![CDATA[参考NexT使用文档hexo你的博客 配置评论 Hexo默认集成Disqus提供第三方评论系统 国内建议多说 登录后在首页选择 “我要安装”。 创建站点，填写站点相关信息。 多说域名处填写自己命名的short_name 例如博主就根据提示顺手填了ZoeyeoZ。。。 创建站点完成后编辑站点配置文件_config.yml文件 新增 duoshuo_shortname 字段，值设置成上一步中的值。 duoshuo_shortname: ZoeyeoZ 此外声明这类配置与主体有关，博主主题［NexT］ 如果采用其他第三方评论系统，通用代码详见多说网站 使用多说的话，Thread Key一定不要改变，Thread Key相当于是识别码；如果你更新了Hexo或者重装了vps，文章的Thread Key改变了的话，那么恭喜你，评论全部没有了。。。 百度统计 登录百度统计， 定位到站点的代码获取页面 复制 hm.js? 后面那串统计脚本 id，如： hm.src = &quot;//hm.baidu.com/hm.js?xxxxxx&quot;; 编辑站点配置文件，新增字段 baidu_analytics 字段，值设置成你的百度统计脚本 id 阅读次数统计（LeanCloud) 详细内容参照为NexT主题添加文章阅读量统计功能 NexT主题目前已经合并这个Feature，因此如果你使用的是NexT主题，可以直接使用不用修改主题模版 修改NexT主题模版 详见原文 修改_config.yml文件在blog/themes/next 添加lean-analytics.swig文件， 在blog/themes/next/layout/_scripts 修改post.swig文件在blog/themes/next/layout/_macro 修改layout.swig文件在blog/themes/next/layout 修改zh-Hans.yml文件 注册LeanCloud（需验证邮箱） 配置LeanCloud登录帐号，配置后拿到AppID及AppKey，用于文章阅读量统计的功能。 创建应用，用于博客的访问统计的数据操作 左上角账号，打开控制台 点击创建应用 新建的应用名称Test（可修改） 点击新创建的应用名进入参数配置页 点击左侧右上角的齿轮图标，创建Class。新建表来保存数据 为了保证我们前面对NexT主题的修改兼容，此处的新建Class名字必须为Counter 选择Counter，点击顶部设置，切换到Test应用操作界面 选择左侧的应用Key选项，得到创建应用的AppID以及AppKey 复制AppID以及AppKey并在NexT主题的_config.yml文件中我们相应的位置填入即可 注意，NexT用户需要修改false为trueleancloud_visitors: enable: true 重新生成部署Hexo博客，应该就可以正常使用文章阅读量统计的功能了。需要特别说明的是：记录文章访问量的唯一标识符是文章的发布日期以及文章的标题，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。 后台管理 初始的文章统计量显示为0，这时对应应用的Counter表中并没有相应的记录。当博客文章在配置好阅读量统计服务之后第一次打开时，便会自动向服务器发送数据来创建一条数据，该数据会被记录在对应的应用的Counter表中。 我们可以修改其中的time字段的数值来达到修改某一篇文章的访问量的目的（博客文章访问量快递提升人气的装逼利器）。双击具体的数值，修改之后回车即可保存。 url字段被当作唯一ID来使用，因此如果你不知道带来的后果的话请不要修改。 title字段显示的是博客文章的标题，用于后台管理的时候区分文章之用，没有什么实际作用。 其他字段皆为自动生成，具体作用请查阅LeanCloud官方文档，如果你不知道有什么作用请不要随意修改。 Web安全 由于AppID以及AppKey是暴露在外的，为确保只用于自己博客，建议开启Web安全选项，这样就只能通过自己的域名才有权访问后台的数据 选择应用的设置的安全中心选项卡 在Web 安全域名中填入我们自己的博客域名，来确保数据调用的安全 如果填写错误可能导致博客文章访问量显示不正常，打开浏览器调试模式，发现Web安全域名填写错误，导致服务器拒绝了数据交互的请求，请修改或者放弃。。。 Swiftype 搜索 使用 Swiftype 之前需要前往 Swiftype 配置一个搜索引擎。 而后编辑 站点配置文件， 新增 swiftype_key 字段，值为你的 swiftype 搜索引擎的 key。 详细的配置请参考： 第三方服务 - Swiftype 进入Swiftype，根据提示操作 注意，修改值在 /blog/themes/next/_config.yml 内# Swiftype Search Key swiftype_key: xxxxxxxxx 复制Install Swiftype On Your Website内的_st(&#39;install&#39;,&#39;XXXXXXXXX&#39;,&#39;2.0.0&#39;); JiaThis 编辑 站点配置文件， 找到字段 jiathisjiathis: enable: true ERROR 如发生类似错误 ERROR Process failed: layout/_scripts/.DS_Store ERROR Process failed: layout/.DS_Store 等 进入主题里面layout和_partial目录下相应目录下，使用删除命令：rm -rf .DS_Store]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[［整理/转载］Github＋HEXO (Mac)]]></title>
      <url>%2F2016%2F04%2F13%2FNewBlog%2F</url>
      <content type="text"><![CDATA[参考 hexo你的博客 HEXO+Github,搭建属于自己的博客 Mac上搭建基于GitHub的Hexo博客［推荐该篇］ 配置环境安装Node.js -&gt; 生成静态页面的安装Git -&gt; 把本地的hexo内容提交至github（Xcode自带Git）申请GitHub 安装Hexo sudo npm install-g hexo输入管理员密码（Mac登录密码）即开始安装(sudo:linux系统管理指令 -g:全局安装) 注意坑一：Hexo官网上的安装命令是 npm install -g hexo-cli，安装时不要忘记前面加上sudo，否则会因为权限问题报错。 终端cd到一个你选定的目录，执行hexo init命令hexo init blog//blog是建立的文件夹名称 cd blog，npm install//安装npm hexo s//开启hexo服务器 本地浏览器，http://localhost:4000 配置Github 关联Github 检查SSH keys是否存在Githubls -al ~/.ssh//检查SSH keys是否存在.- 如果有文件**github_rsa.pub**或**github_dsa.pub**，则直接将SSH key添加到Github中，否则进入下一步生成SSH key。 生成新的ssh keyssh-keygen -t rsa -C &quot;your_email@example.com&quot;//生成public/private rsa key pair 注意将your_email@example.com换成你自己注册Github的邮箱地址。 默认会在相应路径下（~/.ssh/github_rsa.pub）生成github_rsa和github_rsa.pub两个文件。 将ssh key添加到Github中 Find前往文件夹~/.ssh/github_rsa.pub打开github_rsa.pub文件 进入Github -&gt; Settings -&gt; SSH and GPG keys -New SSH key -&gt; Title内容任意，key为github_rsa.pub内容 创建仓库 登录你的Github帐号，新建仓库，名为用户名.github.io固定写法 本地的blog文件夹下内容为： _config.ymldb.jsonnode_modulespackage.jsonscaffoldssourcethemes 终端cd到blog文件夹下，vim打开_config.ymlvim _config.yml 在文件最后deplo修改如下 deploy:type: git repository: https://github.com/yourID/yourID.github.io.git branch: master yourID请换成自己的用户名。 hexo 3.1.1版本后type:值为git。 注意坑二：在配置所有的_config.yml文件时（包括theme中的），在所有的冒号:后边都要加一个空格，否则执行hexo命令会报错。博主本人的报错为FATAL bad indentation of a mapping entry at line 72, column 15:请确认您使用空格进行缩进（Soft tab），并确认冒号后有一个空格。 在blog文件夹目录下执行生成静态页面命令 hexo generate 或者 hexo g 此时若出现如下报错：ERROR Local hexo not found in ~/blogERROR Try runing: ‘npm install hexo –save’若无报错，自行忽略此步骤。博主本人的报错为ERROR Deployer not found: git均执行命令：npm install hexo --save 再执行配置hexo deploy 或者 hexo d 比较奇怪的是之后居然要求我输入用户名和密码（私以为SSH已经搞定 注意坑三：若执行命令hexo deploy仍然报错：无法连接git，则执行如下命令来安装hexo-deployer-git：npm install hexo-deployer-git --save再次执行hexo generate和hexo deploy命令 此时，浏览器中打开网址http://yourID.github.io（将gonghonglou换成你的用户名）能看到和打开http://localhost:4000时一样的页面。 发布文章- 终端cd到blog文件夹下 - ``hexo new &quot;postName&quot;`` //新建文章，位于目录/blog/source/_posts下 - 编辑文章 - 终端cd到blog文件夹下 - ``hexo generate`` //生成静态页面 - ``hexo deploy `` //将文章部署到Github 安装theme 更多官方主题请戳Hexo官网主题页。这里以hexo-theme-next为例 终端cd到 blog 目录 git clone https://github.com/iissnan/hexo-theme-next themes/next 将blog目录下_config.yml里theme的名称landscape修改为next 终端cd到blog目录下执行如下命令(每次部署文章的步骤) hexo clean //清除缓存文件 (db.json) 和已生成的静态文件 (public) hexo g //生成缓存和静态文件 hexo d //重新部署到服务器 附：NexT 使用文档 更改theme内容，修改 blog/_config.yml 文件和 blog/themes/next/_config.yml 文件中对应的属性名称即可。 不要忘记冒号:后加空格。 绑定个人域名 还未绑定，有兴趣的同学请访问原文。]]></content>
    </entry>

    
  
  
</search>
